
function onlyNumber(event){
    return (event.charCode == 8 || event.charCode == 0 || event.charCode == 13) ? null : event.charCode >= 48 && event.charCode <= 57;
}

// Добавляем лейбочку 'Рекомендуется безанкор'

$(document).ready(function() {
    // if($('.appendCustomLabel').length) {
    //     var container = $('.appendCustomLabel'),
    //     label = $('<div>', {
    //         'class': 'customFloatingLabel',
    //         'text': 'Рекомендуется безанкор'
    //     }),
    //     select = container.find('.chosen-select').on('chosen:ready', function() {
    //         label.appendTo(container.find('.chosen-single'))
    //     })
    // }
});

chgpassFormtableResize = function () {
    var width = 0;

    if (typeof table1 != 'undefined')
        $('#table-1').setGridWidth($('#table-1').closest('.jqgrid-responsive').width());

    if (typeof table2 != 'undefined')
        table2.setGridWidth(table2.closest('.jqgrid-responsive').width());

    if (typeof table3 != 'undefined')
        table3.setGridWidth(table3.closest('.jqgrid-responsive').width());

    if (typeof table4 != 'undefined')
        table4.setGridWidth(table4.closest('.jqgrid-responsive').width());

    if (typeof table5 != 'undefined')
        table5.setGridWidth(table5.closest('.jqgrid-responsive').width());
};


(function (window, document, $, undefined) {
    if (typeof $ === 'undefined') {
        throw new Error('This application\'s JavaScript requires jQuery');
    }

// Start Bootstrap JS
// -----------------------------------
    $(function () {

        // POPOVER
        // -----------------------------------

        $('[data-toggle="popover"]').popover();

        // TOOLTIP
        // -----------------------------------

        $('[data-toggle="tooltip"]').tooltip({
            container: 'body'
        });

        // DROPDOWN INPUTS
        // -----------------------------------
        $('.dropdown input').on('click focus', function (event) {
            event.stopPropagation();
        });

    });

// CLASSYLOADER
// -----------------------------------
    $(function () {

        var $scroller = $(window),
                inViewFlagClass = 'js-is-in-view'; // a classname to detect when a chart has been triggered after scroll

        $('[data-classyloader]').each(initClassyLoader);

        function initClassyLoader() {

            var $element = $(this),
                    options = $element.data();

            // At lease we need a data-percentage attribute
            if (options) {
                if (options.triggerInView) {

                    $scroller.scroll(function () {
                        checkLoaderInVIew($element, options);
                    });
                    // if the element starts already in view
                    checkLoaderInVIew($element, options);
                } else
                    startLoader($element, options);
            }
        }

        function checkLoaderInVIew(element, options) {
            var offset = -20;
            if (!element.hasClass(inViewFlagClass) &&
                    $.Utils.isInView(element, {topoffset: offset})) {
                startLoader(element, options);
            }
        }

        function startLoader(element, options) {
            element.ClassyLoader(options).addClass(inViewFlagClass);
        }

    });

(function(window, document, $, undefined){

  $(function(){

    var navSearch = new navbarSearchInput();

    // Open search input
    var $searchOpen = $('[data-search-open]');

    $searchOpen
      .on('click', function (e) { e.stopPropagation(); })
      .on('click', navSearch.toggle);

    // Close search input
    var $searchDismiss = $('[data-search-dismiss]');
    var inputSelector = '.navbar-form input[type="text"]';

    $(inputSelector)
      .on('click', function (e) { e.stopPropagation(); })
      .on('keyup', function(e) {
        if (e.keyCode == 27) // ESC
          navSearch.dismiss();
      });

    // click anywhere closes the search
    $(document).on('click', navSearch.dismiss);
    // dismissable options
    $searchDismiss
      .on('click', function (e) { e.stopPropagation(); })
      .on('click', navSearch.dismiss);

  });

  var navbarSearchInput = function() {
    var navbarFormSelector = 'form.navbar-form2';
    return {
      toggle: function() {

        var navbarForm = $(navbarFormSelector);

        navbarForm.toggleClass('open');

        var isOpen = navbarForm.hasClass('open');

        navbarForm.find('input')[isOpen ? 'focus' : 'blur']();

      },

      dismiss: function() {
        $(navbarFormSelector)
          .removeClass('open')      // Close control
          .find('input[type="text"]').blur() // remove focus
          .val('')                    // Empty input
          ;
      }
    };

  }

})(window, document, window.jQuery);

    /**=========================================================
     * Module: clear-storage.js
     * Removes a key from the browser storage via element click
     =========================================================*/
    (function ($, window, document) {
        'use strict';

        var Selector = '[data-reset-key]';

        $(document).on('click', Selector, function (e) {
            e.preventDefault();
            var key = $(this).data('resetKey');

            if (key) {
                $.localStorage.remove(key);
                // reload the page
                window.location.reload();
            } else {
                $.error('No storage key specified for reset.');
            }
        });

    }(jQuery, window, document));

// GLOBAL CONSTANTS
// -----------------------------------
    window.APP_COLORS = {
        'primary': '#5d9cec',
        'success': '#27c24c',
        'info': '#23b7e5',
        'warning': '#ff902b',
        'danger': '#f05050',
        'inverse': '#131e26',
        'green': '#37bc9b',
        'pink': '#f532e5',
        'purple': '#7266ba',
        'dark': '#3a3f51',
        'yellow': '#fad732',
        'gray-darker': '#232735',
        'gray-dark': '#3a3f51',
        'gray': '#dde6e9',
        'gray-light': '#e4eaec',
        'gray-lighter': '#edf1f2'
    };

    window.APP_MEDIAQUERY = {
        'desktopLG': 1200,
        'desktop': 992,
        'tablet': 768,
        'mobile': 480
    };

// MARKDOWN DOCS
// -----------------------------------
    $(function () {

        $('.flatdoc').each(function () {

            Flatdoc.run({

                fetcher: Flatdoc.file('documentation/readme.md'),

                // Setup custom element selectors (markup validates)
                root: '.flatdoc',
                menu: '.flatdoc-menu',
                title: '.flatdoc-title',
                content: '.flatdoc-content'

            });

        });


    });


// FULLSCREEN
// -----------------------------------
    $(function () {

        var $doc = $(document);
        var $fsToggler = $('[data-toggle-fullscreen]');

        // Not supported under IE
        var ua = window.navigator.userAgent;
        if (ua.indexOf("MSIE ") > 0 || !!ua.match(/Trident.*rv\:11\./)) {
            $fsToggler.addClass('hide');
        }

        $fsToggler.on('click', function (e) {
            e.preventDefault();

            if (screenfull.enabled) {

                screenfull.toggle();

                // Switch icon indicator
                toggleFSIcon($fsToggler);

            } else {
                console.log('Fullscreen not enabled');
            }
        });

        if (screenfull.raw && screenfull.raw.fullscreenchange)
            $doc.on(screenfull.raw.fullscreenchange, function () {
                toggleFSIcon($fsToggler);
            });

        function toggleFSIcon($element) {
            if (screenfull.isFullscreen)
                $element.children('em').removeClass('fa-expand').addClass('fa-compress');
            else
                $element.children('em').removeClass('fa-compress').addClass('fa-expand');
        }

    });


    /**=========================================================
     * Module: gmap.js
     * Init Google Map plugin
     =========================================================*/

    (function ($, window, document) {
        'use strict';

        // -------------------------
        // Map Style definition
        // -------------------------

        // Custom core styles
        // Get more styles from http://snazzymaps.com/style/29/light-monochrome
        // - Just replace and assign to 'MapStyles' the new style array
        var MapStyles = [{featureType: 'water', stylers: [{visibility: 'on'}, {color: '#bdd1f9'}]}, {
                featureType: 'all',
                elementType: 'labels.text.fill',
                stylers: [{color: '#334165'}]
            }, {featureType: 'landscape', stylers: [{color: '#e9ebf1'}]}, {
                featureType: 'road.highway',
                elementType: 'geometry',
                stylers: [{color: '#c5c6c6'}]
            }, {featureType: 'road.arterial', elementType: 'geometry', stylers: [{color: '#fff'}]}, {
                featureType: 'road.local',
                elementType: 'geometry',
                stylers: [{color: '#fff'}]
            }, {featureType: 'transit', elementType: 'geometry', stylers: [{color: '#d8dbe0'}]}, {
                featureType: 'poi',
                elementType: 'geometry',
                stylers: [{color: '#cfd5e0'}]
            }, {featureType: 'administrative', stylers: [{visibility: 'on'}, {lightness: 33}]}, {
                featureType: 'poi.park',
                elementType: 'labels',
                stylers: [{visibility: 'on'}, {lightness: 20}]
            }, {featureType: 'road', stylers: [{color: '#d8dbe0', lightness: 20}]}];


        // -------------------------
        // Custom Script
        // -------------------------

        var mapSelector = '[data-gmap]';

        if ($.fn.gMap) {
            var gMapRefs = [];

            $(mapSelector).each(function () {

                var $this = $(this),
                        addresses = $this.data('address') && $this.data('address').split(';'),
                        titles = $this.data('title') && $this.data('title').split(';'),
                        zoom = $this.data('zoom') || 14,
                        maptype = $this.data('maptype') || 'ROADMAP', // or 'TERRAIN'
                        markers = [];

                if (addresses) {
                    for (var a in addresses) {
                        if (typeof addresses[a] == 'string') {
                            markers.push({
                                address: addresses[a],
                                html: (titles && titles[a]) || '',
                                popup: true   /* Always popup */
                            });
                        }
                    }

                    var options = {
                        controls: {
                            panControl: true,
                            zoomControl: true,
                            mapTypeControl: true,
                            scaleControl: true,
                            streetViewControl: true,
                            overviewMapControl: true
                        },
                        scrollwheel: false,
                        maptype: maptype,
                        markers: markers,
                        zoom: zoom
                                // More options https://github.com/marioestrada/jQuery-gMap
                    };

                    var gMap = $this.gMap(options);

                    var ref = gMap.data('gMap.reference');
                    // save in the map references list
                    gMapRefs.push(ref);

                    // set the styles
                    if ($this.data('styled') !== undefined) {

                        ref.setOptions({
                            styles: MapStyles
                        });

                    }
                }

            }); //each
        }

    }(jQuery, window, document));

// LOAD CUSTOM CSS
// -----------------------------------
    $(function () {
        $('[data-load-css]').on('click', function (e) {

            var element = $(this);

            if (element.is('a'))
                e.preventDefault();

            var uri = element.data('loadCss'),
                    link;

            if (uri) {
                link = createLink(uri);
                if (!link) {
                    $.error('Error creating stylesheet link element.');
                }
            } else {
                $.error('No stylesheet location defined.');
            }

        });
    });

    function createLink(uri) {
        var linkId = 'autoloaded-stylesheet',
                oldLink = $('#' + linkId).attr('id', linkId + '-old');

        $('head').append($('<link/>').attr({
            'id': linkId,
            'rel': 'stylesheet',
            'href': uri
        }));

        if (oldLink.length) {
            oldLink.remove();
        }

        return $('#' + linkId);
    }


// TRANSLATION
// -----------------------------------
    var preferredLang = 'en';
    var pathPrefix = '/admin/i18n'; // folder of json files
    var packName = 'site';
    var storageKey = 'jq-appLang';

    $(function () {
        if (!$.fn.localize)
            return;

        // detect saved language or use default
        var currLang = $.localStorage.get(storageKey) || preferredLang;
        // set initial options
        var opts = {
            language: currLang,
            pathPrefix: pathPrefix,
            callback: function (data, defaultCallback) {
                $.localStorage.set(storageKey, currLang); // save the language
                defaultCallback(data);
            }
        };

        // Set initial language
        setLanguage(opts);

        // Listen for changes
        $('[data-set-lang]').on('click', function () {

            currLang = $(this).data('setLang');

            if (currLang) {

                opts.language = 'ru';

                setLanguage(opts);

                activateDropdown($(this));
            }

        });


        function setLanguage(options) {
            $("[data-localize]").localize(packName, options);
        }

        // Set the current clicked text as the active dropdown text
        function activateDropdown(elem) {
            var menu = elem.parents('.dropdown-menu');
            if (menu.length) {
                var toggle = menu.prev('button, a');
                toggle.text(elem.text());
            }
        }

    });


// JVECTOR MAP
// -----------------------------------
    window.defaultColors = {
        markerColor: '#23b7e5', // the marker points
        bgColor: 'transparent', // the background
        scaleColors: ['#878c9a'], // the color of the region in the serie
        regionFill: '#bbbec6'       // the base region color
    };

    window.VectorMap = function (element, seriesData, markersData) {

        if (!element || !element.length)
            return;

        var attrs = element.data(),
                mapHeight = attrs.height || '300',
                options = {
                    markerColor: attrs.markerColor || defaultColors.markerColor,
                    bgColor: attrs.bgColor || defaultColors.bgColor,
                    scale: attrs.scale || 1,
                    scaleColors: attrs.scaleColors || defaultColors.scaleColors,
                    regionFill: attrs.regionFill || defaultColors.regionFill,
                    mapName: attrs.mapName || 'world_mill_en'
                };

        element.css('height', mapHeight);

        init(element, options, seriesData, markersData);

        function init($element, opts, series, markers) {

            $element.vectorMap({
                map: opts.mapName,
                backgroundColor: opts.bgColor,
                zoomMin: 1,
                zoomMax: 8,
                zoomOnScroll: false,
                regionStyle: {
                    initial: {
                        'fill': opts.regionFill,
                        'fill-opacity': 1,
                        'stroke': 'none',
                        'stroke-width': 1.5,
                        'stroke-opacity': 1
                    },
                    hover: {
                        'fill-opacity': 0.8
                    },
                    selected: {
                        fill: 'blue'
                    },
                    selectedHover: {}
                },
                focusOn: {x: 0.4, y: 0.6, scale: opts.scale},
                markerStyle: {
                    initial: {
                        fill: opts.markerColor,
                        stroke: opts.markerColor
                    }
                },
                onRegionLabelShow: function (e, el, code) {
                    if (series && series[code])
                        el.html(el.html() + ': ' + series[code] + ' visitors');
                },
                markers: markers,
                series: {
                    regions: [{
                            values: series,
                            scale: opts.scaleColors,
                            normalizeFunction: 'polynomial'
                        }]
                },
            });

        }// end init
    };
// Morris
// -----------------------------------
    $(function () {

        if (typeof Morris === 'undefined')
            return;

        var chartdata = [
            {y: "2006", a: 100, b: 90},
            {y: "2007", a: 75, b: 65},
            {y: "2008", a: 50, b: 40},
            {y: "2009", a: 75, b: 65},
            {y: "2010", a: 50, b: 40},
            {y: "2011", a: 75, b: 65},
            {y: "2012", a: 100, b: 90}
        ];

        var donutdata = [
            {label: "Download Sales", value: 12},
            {label: "In-Store Sales", value: 30},
            {label: "Mail-Order Sales", value: 20}
        ];

        // Line Chart
        // -----------------------------------

        new Morris.Line({
            element: 'morris-line',
            data: chartdata,
            xkey: 'y',
            ykeys: ["a", "b"],
            labels: ["Serie A", "Serie B"],
            lineColors: ["#31C0BE", "#7a92a3"],
            resize: true
        });

        // Donut Chart
        // -----------------------------------
        new Morris.Donut({
            element: 'morris-donut',
            data: donutdata,
            colors: ['#f05050', '#fad732', '#ff902b'],
            resize: true
        });

        // Bar Chart
        // -----------------------------------
        new Morris.Bar({
            element: 'morris-bar',
            data: chartdata,
            xkey: 'y',
            ykeys: ["a", "b"],
            labels: ["Series A", "Series B"],
            xLabelMargin: 2,
            barColors: ['#23b7e5', '#f05050'],
            resize: true
        });

        // Area Chart
        // -----------------------------------
        new Morris.Area({
            element: 'morris-area',
            data: chartdata,
            xkey: 'y',
            ykeys: ["a", "b"],
            labels: ["Serie A", "Serie B"],
            lineColors: ['#7266ba', '#23b7e5'],
            resize: true
        });

    });

    /**=========================================================
     * Module: notify.js
     * Create toggleable notifications that fade out automatically.
     * Based on Notify addon from UIKit (http://getuikit.com/docs/addons_notify.html)
     * [data-toggle="notify"]
     * [data-options="options in json format" ]
     =========================================================*/

    (function ($, window, document) {
        'use strict';

        var Selector = '[data-notify]',
                autoloadSelector = '[data-onload]',
                doc = $(document);


        $(function () {

            $(Selector).each(function () {

                var $this = $(this),
                        onload = $this.data('onload');

                if (onload !== undefined) {
                    setTimeout(function () {
                        notifyNow($this);
                    }, 800);
                }

                $this.on('click', function (e) {
                    e.preventDefault();
                    notifyNow($this);
                });

            });

        });

        function notifyNow($element) {
            var message = $element.data('message'),
                    options = $element.data('options');

            if (!message)
                $.error('Notify: No message specified');

            $.notify(message, options || {});
        }


    }(jQuery, window, document));

    /**
     * Notify Addon definition as jQuery plugin
     * Adapted version to work with Bootstrap classes
     * More information http://getuikit.com/docs/addons_notify.html
     */

    (function ($, window, document) {

        var containers = {},
                messages = {},
                notify = function (options) {

                    if ($.type(options) == 'string') {
                        options = {message: options};
                    }

                    if (arguments[1]) {
                        options = $.extend(options, $.type(arguments[1]) == 'string' ? {status: arguments[1]} : arguments[1]);
                    }

                    return (new Message(options)).show();
                },
                closeAll = function (group, instantly) {
                    if (group) {
                        for (var id in messages) {
                            if (group === messages[id].group)
                                messages[id].close(instantly);
                        }
                    } else {
                        for (var id in messages) {
                            messages[id].close(instantly);
                        }
                    }
                };

        var Message = function (options) {

            var $this = this;

            this.options = $.extend({}, Message.defaults, options);

            this.uuid = "ID" + (new Date().getTime()) + "RAND" + (Math.ceil(Math.random() * 100000));
            this.element = $([
                // alert-dismissable enables bs close icon
                '<div class="uk-notify-message alert-dismissable">',
                '<a class="close">&times;</a>',
                '<div>' + this.options.message + '</div>',
                '</div>'

            ].join('')).data("notifyMessage", this);

            // status
            if (this.options.status) {
                this.element.addClass('alert alert-' + this.options.status);
                this.currentstatus = this.options.status;
            }

            this.group = this.options.group;

            messages[this.uuid] = this;

            if (!containers[this.options.pos]) {
                containers[this.options.pos] = $('<div class="uk-notify uk-notify-' + this.options.pos + '"></div>').appendTo('body').on("click", ".uk-notify-message", function () {
                    $(this).data("notifyMessage").close();
                });
            }
        };


        $.extend(Message.prototype, {

            uuid: false,
            element: false,
            timout: false,
            currentstatus: "",
            group: false,

            show: function () {

                if (this.element.is(":visible"))
                    return;

                var $this = this;

                containers[this.options.pos].show().prepend(this.element);

                var marginbottom = parseInt(this.element.css("margin-bottom"), 10);

                this.element.css({
                    "opacity": 0,
                    "margin-top": -1 * this.element.outerHeight(),
                    "margin-bottom": 0
                }).animate({"opacity": 1, "margin-top": 0, "margin-bottom": marginbottom}, function () {

                    if ($this.options.timeout) {

                        var closefn = function () {
                            $this.close();
                        };

                        $this.timeout = setTimeout(closefn, $this.options.timeout);

                        $this.element.hover(
                                function () {
                                    clearTimeout($this.timeout);
                                },
                                function () {
                                    $this.timeout = setTimeout(closefn, $this.options.timeout);
                                }
                        );
                    }

                });

                return this;
            },

            close: function (instantly) {

                var $this = this,
                        finalize = function () {
                            $this.element.remove();

                            if (!containers[$this.options.pos].children().length) {
                                containers[$this.options.pos].hide();
                            }

                            delete messages[$this.uuid];
                        };

                if (this.timeout)
                    clearTimeout(this.timeout);

                if (instantly) {
                    finalize();
                } else {
                    this.element.animate({
                        "opacity": 0,
                        "margin-top": -1 * this.element.outerHeight(),
                        "margin-bottom": 0
                    }, function () {
                        finalize();
                    });
                }
            },

            content: function (html) {

                var container = this.element.find(">div");

                if (!html) {
                    return container.html();
                }

                container.html(html);

                return this;
            },

            status: function (status) {

                if (!status) {
                    return this.currentstatus;
                }

                this.element.removeClass('alert alert-' + this.currentstatus).addClass('alert alert-' + status);

                this.currentstatus = status;

                return this;
            }
        });

        Message.defaults = {
            message: "",
            status: "normal",
            timeout: 5000,
            group: null,
            pos: 'top-center'
        };


        $["notify"] = notify;
        $["notify"].message = Message;
        $["notify"].closeAll = closeAll;

        return notify;

    }(jQuery, window, document));

// NOW TIMER
// -----------------------------------
    $(function () {

        $('[data-now]').each(function () {
            var element = $(this),
                    format = element.data('format');

            function updateTime() {
                var dt = moment(new Date()).format(format);
                element.text(dt);
            }

            updateTime();
            setInterval(updateTime, 1000);

        });
    });

    /**=========================================================
     * Module: panel-tools.js
     * Dismiss panels
     * [data-tool="panel-dismiss"]
     *
     * Requires animo.js
     =========================================================*/
    (function ($, window, document) {
        'use strict';

        var panelSelector = '[data-tool="panel-dismiss"]',
                removeEvent = 'panel.remove',
                removedEvent = 'panel.removed';

        $(document).on('click', panelSelector, function () {

            // find the first parent panel
            var parent = $(this).closest('.panel');
            var deferred = new $.Deferred();

            // Trigger the event and finally remove the element
            parent.trigger(removeEvent, [parent, deferred]);
            // needs resolve() to be called
            deferred.done(removeElement);

            function removeElement() {
                if ($.support.animation) {
                    parent.animo({animation: 'bounceOut'}, destroyPanel);
                } else
                    destroyPanel();
            }

            function destroyPanel() {
                var col = parent.parent();

                $.when(parent.trigger(removedEvent, [parent]))
                        .done(function () {
                            parent.remove();
                            // remove the parent if it is a row and is empty and not a sortable (portlet)
                            col
                                    .trigger(removedEvent) // An event to catch when the panel has been removed from DOM
                                    .filter(function () {
                                        var el = $(this);
                                        return (el.is('[class*="col-"]:not(.sortable)') && el.children('*').length === 0);
                                    }).remove();
                        });


            }

        });

    }(jQuery, window, document));


    /**
     * Collapse panels
     * [data-tool="panel-collapse"]
     *
     * Also uses browser storage to keep track
     * of panels collapsed state
     */
    (function ($, window, document) {
        'use strict';
        var panelSelector = '[data-tool="panel-collapse"]',
                storageKeyName = 'jq-panelState';

        // Prepare the panel to be collapsable and its events
        $(panelSelector).each(function () {
            // find the first parent panel
            var $this = $(this),
                    parent = $this.closest('.panel'),
                    wrapper = parent.find('.panel-wrapper'),
                    collapseOpts = {toggle: false},
                    iconElement = $this.children('em'),
                    panelId = parent.attr('id');

            // if wrapper not added, add it
            // we need a wrapper to avoid jumping due to the paddings
            if (!wrapper.length) {
                wrapper =
                        parent.children('.panel-heading').nextAll() //find('.panel-body, .panel-footer')
                        .wrapAll('<div/>')
                        .parent()
                        .addClass('panel-wrapper');
                collapseOpts = {};
            }

            // Init collapse and bind events to switch icons
            wrapper
                    .collapse(collapseOpts)
                    .on('hide.bs.collapse', function () {
                        setIconHide(iconElement);
                        savePanelState(panelId, 'hide');
                        wrapper.prev('.panel-heading').addClass('panel-heading-collapsed');
                    })
                    .on('show.bs.collapse', function () {
                        setIconShow(iconElement);
                        savePanelState(panelId, 'show');
                        wrapper.prev('.panel-heading').removeClass('panel-heading-collapsed');
                    });

            // Load the saved state if exists
            /*var currentState = loadPanelState(panelId);
             if (currentState) {
             setTimeout(function () {
             wrapper.collapse(currentState);
             }, 0);
             savePanelState(panelId, currentState);
             }*/
        });

        // finally catch clicks to toggle panel collapse
        $(document).on('click', panelSelector, function () {

            var parent = $(this).closest('.panel');
            var wrapper = parent.find('.panel-wrapper');

            wrapper.collapse('toggle');

        });

        /////////////////////////////////////////////
        // Common use functions for panel collapse //
        /////////////////////////////////////////////
        function setIconShow(iconEl) {
            iconEl.removeClass('fa-plus').addClass('fa-minus');
        }

        function setIconHide(iconEl) {
            iconEl.removeClass('fa-minus').addClass('fa-plus');
        }

        function savePanelState(id, state) {
            var data = $.localStorage.get(storageKeyName);
            if (!data) {
                data = {};
            }
            data[id] = state;
            $.localStorage.set(storageKeyName, data);
        }

        function loadPanelState(id) {
            var data = $.localStorage.get(storageKeyName);
            if (data) {
                return data[id] || false;
            }
        }


    }(jQuery, window, document));


    /**
     * Refresh panels
     * [data-tool="panel-refresh"]
     * [data-spinner="standard"]
     */
    (function ($, window, document) {
        'use strict';
        var panelSelector = '[data-tool="panel-refresh"]',
                refreshEvent = 'panel.refresh',
                whirlClass = 'whirl',
                defaultSpinner = 'standard';

        // method to clear the spinner when done
        function removeSpinner() {
            this.removeClass(whirlClass);
        }

        // catch clicks to toggle panel refresh
        $(document).on('click', panelSelector, function () {
            var $this = $(this),
                    panel = $this.parents('.panel').eq(0),
                    spinner = $this.data('spinner') || defaultSpinner
                    ;

            // start showing the spinner
            panel.addClass(whirlClass + ' ' + spinner);

            // attach as public method
            panel.removeSpinner = removeSpinner;

            // Trigger the event and send the panel object
            $this.trigger(refreshEvent, [panel]);

        });


    }(jQuery, window, document));

    /**=========================================================
     * Module: play-animation.js
     * Provides a simple way to run animation with a trigger
     * Targeted elements must have
     *   [data-animate"]
     *   [data-target="Target element affected by the animation"]
     *   [data-play="Animation name (http://daneden.github.io/animate.css/)"]
     *
     * Requires animo.js
     =========================================================*/

    (function ($, window, document) {
        'use strict';

        var Selector = '[data-animate]';

        $(function () {

            var $scroller = $(window).add('body, .wrapper');

            // Parse animations params and attach trigger to scroll
            $(Selector).each(function () {
                var $this = $(this),
                        offset = $this.data('offset'),
                        delay = $this.data('delay') || 100, // milliseconds
                        animation = $this.data('play') || 'bounce';

                if (typeof offset !== 'undefined') {

                    // test if the element starts visible
                    testAnimation($this);
                    // test on scroll
                    $scroller.scroll(function () {
                        testAnimation($this);
                    });

                }

                // Test an element visibilty and trigger the given animation
                function testAnimation(element) {
                    if (!element.hasClass('anim-running') &&
                            $.Utils.isInView(element, {topoffset: offset})) {
                        element
                                .addClass('anim-running');

                        setTimeout(function () {
                            element
                                    .addClass('anim-done')
                                    .animo({animation: animation, duration: 0.7});
                        }, delay);

                    }
                }

            });

            // Run click triggered animations
            $(document).on('click', Selector, function () {

                var $this = $(this),
                        targetSel = $this.data('target'),
                        animation = $this.data('play') || 'bounce',
                        target = $(targetSel);

                if (target && target.length) {
                    target.animo({animation: animation});
                }

            });

        });

    }(jQuery, window, document));

    /**=========================================================
     * Module: portlet.js
     * Drag and drop any panel to change its position
     * The Selector should could be applied to any object that contains
     * panel, so .col-* element are ideal.
     =========================================================*/

    (function ($, window, document) {
        'use strict';

        // Component is optional
        if (!$.fn.sortable)
            return;

        var Selector = '[data-toggle="portlet"]',
                storageKeyName = 'jq-portletState';

        $(function () {

            $(Selector).sortable({
                connectWith: Selector,
                items: 'div.panel',
                handle: '.portlet-handler',
                opacity: 0.7,
                placeholder: 'portlet box-placeholder',
                cancel: '.portlet-cancel',
                forcePlaceholderSize: true,
                iframeFix: false,
                tolerance: 'pointer',
                helper: 'original',
                revert: 200,
                forceHelperSize: true,
                update: savePortletOrder,
                create: loadPortletOrder
            })
                    // optionally disables mouse selection
                    //.disableSelection()
                    ;

        });

        function savePortletOrder(event, ui) {

            var data = $.localStorage.get(storageKeyName);

            if (!data) {
                data = {};
            }

            data[this.id] = $(this).sortable('toArray');

            if (data) {
                $.localStorage.set(storageKeyName, data);
            }

        }

        function loadPortletOrder() {

            var data = $.localStorage.get(storageKeyName);

            if (data) {

                var porletId = this.id,
                        panels = data[porletId];

                if (panels) {
                    var portlet = $('#' + porletId);

                    $.each(panels, function (index, value) {
                        $('#' + value).appendTo(portlet);
                    });
                }

            }

        }

    }(jQuery, window, document));


// Rickshaw
// -----------------------------------
    $(function () {

        if (typeof Rickshaw === 'undefined')
            return;

        var seriesData = [[], [], []];
        var random = new Rickshaw.Fixtures.RandomData(150);

        for (var i = 0; i < 150; i++) {
            random.addData(seriesData);
        }

        var series1 = [
            {
                color: "#c05020",
                data: seriesData[0],
                name: 'New York'
            }, {
                color: "#30c020",
                data: seriesData[1],
                name: 'London'
            }, {
                color: "#6060c0",
                data: seriesData[2],
                name: 'Tokyo'
            }
        ];

        var graph1 = new Rickshaw.Graph({
            element: document.querySelector("#rickshaw1"),
            series: series1,
            renderer: 'area'
        });

        graph1.render();


        // Graph 2
        // -----------------------------------

        var graph2 = new Rickshaw.Graph({
            element: document.querySelector("#rickshaw2"),
            renderer: 'area',
            stroke: true,
            series: [{
                    data: [{x: 0, y: 40}, {x: 1, y: 49}, {x: 2, y: 38}, {x: 3, y: 30}, {x: 4, y: 32}],
                    color: '#f05050'
                }, {
                    data: [{x: 0, y: 40}, {x: 1, y: 49}, {x: 2, y: 38}, {x: 3, y: 30}, {x: 4, y: 32}],
                    color: '#fad732'
                }]
        });

        graph2.render();

        // Graph 3
        // -----------------------------------


        var graph3 = new Rickshaw.Graph({
            element: document.querySelector("#rickshaw3"),
            renderer: 'line',
            series: [{
                    data: [{x: 0, y: 40}, {x: 1, y: 49}, {x: 2, y: 38}, {x: 3, y: 30}, {x: 4, y: 32}],
                    color: '#7266ba'
                }, {
                    data: [{x: 0, y: 20}, {x: 1, y: 24}, {x: 2, y: 19}, {x: 3, y: 15}, {x: 4, y: 16}],
                    color: '#23b7e5'
                }]
        });
        graph3.render();


        // Graph 4
        // -----------------------------------


        var graph4 = new Rickshaw.Graph({
            element: document.querySelector("#rickshaw4"),
            renderer: 'bar',
            series: [
                {
                    data: [{x: 0, y: 40}, {x: 1, y: 49}, {x: 2, y: 38}, {x: 3, y: 30}, {x: 4, y: 32}],
                    color: '#fad732'
                }, {
                    data: [{x: 0, y: 20}, {x: 1, y: 24}, {x: 2, y: 19}, {x: 3, y: 15}, {x: 4, y: 16}],
                    color: '#ff902b'

                }]
        });
        graph4.render();


    });
// SIDEBAR
// -----------------------------------
    var $win;
    var $html;
    var $body;
    var $sidebar;
    var mq;

    $(function () {
        $win = $(window);
        $html = $('html');
        $body = $('body');
        $sidebar = $('.sidebar');
        mq = APP_MEDIAQUERY;

        // AUTOCOLLAPSE ITEMS
        // -----------------------------------

        /*var sidebarCollapse = $sidebar.find('.collapse');
         sidebarCollapse.on('show.bs.collapse', function (event) {

         event.stopPropagation();
         if ($(this).parents('.collapse').length === 0)
         sidebarCollapse.filter('.in').collapse('hide');

         });*/

        // SIDEBAR ACTIVE STATE
        // -----------------------------------

        // Find current active item
        var currentItem = $('.sidebar .active').parents('li');

        // hover mode don't try to expand active collapse
        /*if (!useAsideHover()){
         if (!currentItem.hasClass('na'))
         currentItem
         .addClass('active')     // activate the parent
         .children('.collapse')  // find the collapse
         .collapse('show');      // and show it
         }*/

        // remove this if you use only collapsible sidebar items
        /*$sidebar.find('li > a + ul').on('show.bs.collapse', function (e) {
         if (useAsideHover()) e.preventDefault();
         });*/

        // SIDEBAR COLLAPSED ITEM HANDLER
        // -----------------------------------


        var eventName = isTouch() ? 'click' : 'mouseenter';
        var subNav = $();
        $sidebar.on(eventName, '.nav > li', function () {

            if (isSidebarCollapsed() || useAsideHover()) {
                subNav.trigger('mouseleave');
                subNav = toggleMenuItem($(this));

                // Used to detect click and touch events outside the sidebar
                sidebarAddBackdrop();
            }

        });

        var sidebarAnyclickClose = $sidebar.data('sidebarAnyclickClose');

        // Allows to close
        if (typeof sidebarAnyclickClose !== 'undefined') {

            $('.wrapper').on('click.sidebar', function (e) {
                // don't check if sidebar not visible
                if (!$body.hasClass('aside-toggled'))
                    return;

                var $target = $(e.target);
                if (!$target.parents('.aside').length && // if not child of sidebar
                        !$target.is('#user-block-toggle') && // user block toggle anchor
                        !$target.parent().is('#user-block-toggle') // user block toggle icon
                        ) {
                    $body.removeClass('aside-toggled');
                }

            });
        }

    });

    function sidebarAddBackdrop() {
        var $backdrop = $('<div/>', {'class': 'dropdown-backdrop'});
        $backdrop.insertAfter('.aside').on("click mouseenter", function () {
            removeFloatingNav();
        });
    }

    // Open the collapse sidebar submenu items when on touch devices
    // - desktop only opens on hover
    function toggleTouchItem($element) {
        $element
                .siblings('li')
                .removeClass('open')
                .end()
                .toggleClass('open');
    }

    // Handles hover to open items under collapsed menu
    // -----------------------------------
    function toggleMenuItem($listItem) {

        removeFloatingNav();

        var ul = $listItem.children('ul');

        if (!ul.length)
            return $();
        if ($listItem.hasClass('open')) {
            toggleTouchItem($listItem);
            return $();
        }

        var $aside = $('.aside');
        var $asideInner = $('.aside-inner'); // for top offset calculation
        // float aside uses extra padding on aside
        var mar = parseInt($asideInner.css('padding-top'), 0) + parseInt($aside.css('padding-top'), 0);

        var subNav = ul.clone().appendTo($aside);

        toggleTouchItem($listItem);

        var itemTop = ($listItem.position().top + mar) - $sidebar.scrollTop();
        var vwHeight = $win.height();

        subNav
                .addClass('nav-floating')
                .css({
                    position: isFixed() ? 'fixed' : 'absolute',
                    top: itemTop,
                    bottom: (subNav.outerHeight(true) + itemTop > vwHeight) ? 0 : 'auto'
                });

        subNav.on('mouseleave', function () {
            toggleTouchItem($listItem);
            subNav.remove();
        });

        return subNav;
    }

    function removeFloatingNav() {
        $('.sidebar-subnav.nav-floating').remove();
        $('.dropdown-backdrop').remove();
        $('.sidebar li.open').removeClass('open');
    }

    function isTouch() {
        return $html.hasClass('touch');
    }

    function isSidebarCollapsed() {
        return $body.hasClass('aside-collapsed');
    }

    function isSidebarToggled() {
        return $body.hasClass('aside-toggled');
    }

    function isMobile() {
        return $win.width() < mq.tablet;
    }

    function isFixed() {
        return $body.hasClass('layout-fixed');
    }

    function useAsideHover() {
        return $body.hasClass('aside-hover');
    }


// SKYCONS
// -----------------------------------
    $(function () {

        $('[data-skycon]').each(function () {
            var element = $(this),
                    skycons = new Skycons({'color': (element.data('color') || 'white')});

            element.html('<canvas width="' + element.data('width') + '" height="' + element.data('height') + '"></canvas>');

            skycons.add(element.children()[0], element.data('skycon'));

            skycons.play();
        });

    });

// SLIMSCROLL
// -----------------------------------
    $(function () {

        /*$('[data-scrollable]').each(function () {

         var element = $(this),
         defaultHeight = 250;

         element.slimScroll({
         height: (element.data('height') || defaultHeight),
         railVisible: false
         });
         });*/
    });


// SPARKLINE
// -----------------------------------
    $(function () {

        $('[data-sparkline]').each(initSparkLine);

        function initSparkLine() {
            var $element = $(this),
                    options = $element.data(),
                    values = options.values && options.values.split(',');

            options.type = options.type || 'bar'; // default chart is bar
            options.disableHiddenCheck = true;

            $element.sparkline(values, options);

            if (options.resize) {
                $(window).resize(function () {
                    $element.sparkline(values, options);
                });
            }
        }
    });

// Sweet Alert
// -----------------------------------
    $(function () {

        $('#swal-demo1').on('click', function (e) {
            e.preventDefault();
            swal("Here's a message!")
        });


        $('#swal-demo2').on('click', function (e) {
            e.preventDefault();
            swal("Here's a message!", "It's pretty, isn't it?")
        });

        $('#swal-demo4').on('click', function (e) {
            e.preventDefault();
            swal({
                title: "Are you sure?",
                text: "You will not be able to recover this imaginary file!",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Yes, delete it!",
                closeOnConfirm: false
            },
                    function () {
                        swal("Deleted!", "Your imaginary file has been deleted.", "success");
                    });

        });

        $('#swal-demo5').on('click', function (e) {
            e.preventDefault();
            swal({
                title: "Are you sure?",
                text: "You will not be able to recover this imaginary file!",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Yes, delete it!",
                cancelButtonText: "No, cancel plx!",
                closeOnConfirm: false,
                closeOnCancel: false
            }, function (isConfirm) {
                if (isConfirm) {
                    swal("Deleted!", "Your imaginary file has been deleted.", "success");
                } else {
                    swal("Cancelled", "Your imaginary file is safe :)", "error");
                }
            });

        });

    });


// Custom jQuery
// -----------------------------------
    $(function () {
        $('[data-check-all]').on('change', function () {
            var $this = $(this),
                    index = $this.index() + 1,
                    checkbox = $this.find('input[type="checkbox"]'),
                    table = $this.parents('table');
            // Make sure to affect only the correct checkbox column
            table.find('tbody > tr > td:nth-child(' + index + ') input[type="checkbox"]')
                    .prop('checked', checkbox[0].checked);

        });

    });


// TOGGLE STATE
// -----------------------------------
    $(function () {
        var $body = $('body');
        toggle = new StateToggler();

        $('[data-toggle-state]')
                .on('click', function (e) {
                    // e.preventDefault();
                    e.stopPropagation();
                    var element = $(this),
                            classname = element.data('toggleState'),
                            noPersist = (element.attr('data-no-persist') !== undefined);

                    if (classname) {
                        if ($body.hasClass(classname)) {
                            $body.removeClass(classname);
                            createCookie('toggled', 0, 365);
                        } else {
                            $body.addClass(classname);
                            createCookie('toggled', 1, 365);
                        }

                    }
                    // some elements may need this when toggled class change the content size
                    // e.g. sidebar collapsed mode and jqGrid
                    $(window).resize();

                });

        var passErr = "Пароль должен состоять минимум из 6 символов, содержать буквы и цифры",
               // passReg = "(?=.*[А-яа-яA-Za-z])(?=.*[0-9])[А-яа-яA-Za-z0-9]";
                passReg = "(?=[#$-/:-?{-~!\"^_`\\[\\]a-zA-Z]*([0-9#$-/:-?{-~!\"^_`\\[\\]]))(?=[#$-/:-?{-~!\"^_`\\[\\]a-zA-Z0-9]*[a-zA-Z])[#$-/:-?{-~!\"^_`\\[\\]a-zA-Z0-9]{6,100}";
        if ($('#fos_user_resetting_form').length || $('#userSignupForm').length) {
            $('input[type=password]:first').attr('data-parsley-error-message', passErr);
           $('input[type=password]:first').attr('data-parsley-minlength', "6");
            $('input[type=password]:first').attr('data-parsley-maxlength', "100");

            $('input[type=password]:first').attr('data-parsley-pattern', passReg);

            $('input[type=password]:last').attr('data-parsley-equalto', 'input[type=password]:first');
        }

        if ($('#chgpassForm').length) {
            //$('input[type=password]:first').attr('data-parsley-error-message', passErr);

            //$('input[type=password]:first').attr('data-parsley-pattern', passReg);

            $('#newpass').attr('data-parsley-error-message', passErr);

            $('#newpass').attr('data-parsley-pattern', passReg);

            $('input[type=password]:last').attr('data-parsley-equalto', '#newpass');
        }
    });

    // Handle states to/from localstorage
    window.StateToggler = function () {
        var storageKeyName = 'jq-toggleState';

        // Helper object to check for words in a phrase //
        var WordChecker = {
            hasWord: function (phrase, word) {
                return new RegExp('(^|\\s)' + word + '(\\s|$)').test(phrase);
            },
            addWord: function (phrase, word) {
                if (!this.hasWord(phrase, word)) {
                    return (phrase + (phrase ? ' ' : '') + word);
                }
            },
            removeWord: function (phrase, word) {
                if (this.hasWord(phrase, word)) {
                    return phrase.replace(new RegExp('(^|\\s)*' + word + '(\\s|$)*', 'g'), '');
                }
            }
        };

        // Return service public methods
        return {
            // Add a state to the browser storage to be restored later
            addState: function (classname) {
                var data = $.localStorage.get(storageKeyName);

                if (!data) {
                    data = classname;
                } else {
                    data = WordChecker.addWord(data, classname);
                }

                $.localStorage.set(storageKeyName, data);
            },

            // Remove a state from the browser storage
            removeState: function (classname) {
                var data = $.localStorage.get(storageKeyName);
                // nothing to remove
                if (!data)
                    return;

                data = WordChecker.removeWord(data, classname);

                $.localStorage.set(storageKeyName, data);
            },

            // Load the state string and restore the classlist
            restoreState: function ($elem) {
                var data = $.localStorage.get(storageKeyName);

                // nothing to restore
                if (!data) {
                    $('aside').fadeIn();
                    return;
                }

                $elem.addClass(data);
                $('aside').fadeIn();
            }

        };
    };

// Bootstrap Tour
// -----------------------------------
    $(function () {

        // Prepare steps
        var tourSteps = [];
        $('.tour-step').each(function () {
            var stepsOptions = $(this).data();
            stepsOptions.element = '#' + this.id;
            tourSteps.push(stepsOptions);
        });

        if (tourSteps.length) {
            // Instance the tour
            var tour = new Tour({
                backdrop: true,
                onShown: function (tour) {
                    // BootstrapTour is not compatible with z-index based layout
                    // so adding position:static for this case makes the browser
                    // to ignore the property
                    $('.wrapper > section').css({'position': 'static'});
                },
                onHide: function (tour) {
                    // finally restore on destroy and reuse the value declared in stylesheet
                    $('.wrapper > section').css({'position': ''});
                },
                steps: tourSteps
            });

            // Initialize the tour
            tour.init();


            $('#start-tour').on('click', function () {
                // Start the tour
                tour.restart();
            });
        }

    });

    $(function () {
        var hash = window.location.hash;
        hash && $('ul.nav a[href="' + hash + '"]').tab('show');

        if (hash == '#comment') {
            setTimeout(function () {
                $('div[name=comment]').focus();
                placeCaretAtEnd($('div[name=comment]')[0]);
            }, 300);
        }

        $('.nav-tabs a').click(function (e) {
            $(this).tab('show');

            if (window.history.pushState) {
                window.history.pushState(null, null, this.hash);
            } else {
                window.location.hash = this.hash;
            }
        });
    });

    /**=========================================================
     * Module: utils.js
     * jQuery Utility functions library
     * adapted from the core of UIKit
     =========================================================*/

    (function ($, window, doc) {
        'use strict';

        var $html = $("html"), $win = $(window);

        $.support.transition = (function () {

            var transitionEnd = (function () {

                var element = doc.body || doc.documentElement,
                        transEndEventNames = {
                            WebkitTransition: 'webkitTransitionEnd',
                            MozTransition: 'transitionend',
                            OTransition: 'oTransitionEnd otransitionend',
                            transition: 'transitionend'
                        }, name;

                for (name in transEndEventNames) {
                    if (element.style[name] !== undefined)
                        return transEndEventNames[name];
                }
            }());

            return transitionEnd && {end: transitionEnd};
        })();

        $.support.animation = (function () {

            var animationEnd = (function () {

                var element = doc.body || doc.documentElement,
                        animEndEventNames = {
                            WebkitAnimation: 'webkitAnimationEnd',
                            MozAnimation: 'animationend',
                            OAnimation: 'oAnimationEnd oanimationend',
                            animation: 'animationend'
                        }, name;

                for (name in animEndEventNames) {
                    if (element.style[name] !== undefined)
                        return animEndEventNames[name];
                }
            }());

            return animationEnd && {end: animationEnd};
        })();

        $.support.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function (callback) {
            window.setTimeout(callback, 1000 / 60);
        };
        $.support.touch = (
                ('ontouchstart' in window && navigator.userAgent.toLowerCase().match(/mobile|tablet/)) ||
                (window.DocumentTouch && document instanceof window.DocumentTouch) ||
                (window.navigator['msPointerEnabled'] && window.navigator['msMaxTouchPoints'] > 0) || //IE 10
                (window.navigator['pointerEnabled'] && window.navigator['maxTouchPoints'] > 0) || //IE >=11
                false
                );
        $.support.mutationobserver = (window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver || null);

        $.Utils = {};

        $.Utils.debounce = function (func, wait, immediate) {
            var timeout;
            return function () {
                var context = this, args = arguments;
                var later = function () {
                    timeout = null;
                    if (!immediate)
                        func.apply(context, args);
                };
                var callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow)
                    func.apply(context, args);
            };
        };

        $.Utils.removeCssRules = function (selectorRegEx) {
            var idx, idxs, stylesheet, _i, _j, _k, _len, _len1, _len2, _ref;

            if (!selectorRegEx)
                return;

            setTimeout(function () {
                try {
                    _ref = document.styleSheets;
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        stylesheet = _ref[_i];
                        idxs = [];
                        stylesheet.cssRules = stylesheet.cssRules;
                        for (idx = _j = 0, _len1 = stylesheet.cssRules.length; _j < _len1; idx = ++_j) {
                            if (stylesheet.cssRules[idx].type === CSSRule.STYLE_RULE && selectorRegEx.test(stylesheet.cssRules[idx].selectorText)) {
                                idxs.unshift(idx);
                            }
                        }
                        for (_k = 0, _len2 = idxs.length; _k < _len2; _k++) {
                            stylesheet.deleteRule(idxs[_k]);
                        }
                    }
                } catch (_error) {
                }
            }, 0);
        };

        $.Utils.isInView = function (element, options) {

            var $element = $(element);

            if (!$element.is(':visible')) {
                return false;
            }

            var window_left = $win.scrollLeft(),
                    window_top = $win.scrollTop(),
                    offset = $element.offset(),
                    left = offset.left,
                    top = offset.top;

            options = $.extend({topoffset: 0, leftoffset: 0}, options);

            if (top + $element.height() >= window_top && top - options.topoffset <= window_top + $win.height() &&
                    left + $element.width() >= window_left && left - options.leftoffset <= window_left + $win.width()) {
                return true;
            } else {
                return false;
            }
        };

        $.Utils.options = function (string) {

            if ($.isPlainObject(string))
                return string;

            var start = (string ? string.indexOf("{") : -1), options = {};

            if (start != -1) {
                try {
                    options = (new Function("", "var json = " + string.substr(start) + "; return JSON.parse(JSON.stringify(json));"))();
                } catch (e) {
                }
            }

            return options;
        };

        $.Utils.events = {};
        $.Utils.events.click = $.support.touch ? 'tap' : 'click';

        $.langdirection = $html.attr("dir") == "rtl" ? "right" : "left";

        $(function () {

            // Check for dom modifications
            if (!$.support.mutationobserver)
                return;

            // Install an observer for custom needs of dom changes
            var observer = new $.support.mutationobserver($.Utils.debounce(function (mutations) {
                $(doc).trigger("domready");
            }, 300));

            // pass in the target node, as well as the observer options
            observer.observe(document.body, {childList: true, subtree: true});

        });

        // add touch identifier class
        $html.addClass($.support.touch ? "touch" : "no-touch");

    }(jQuery, window, document));
// Custom jQuery
// -----------------------------------

// Forms Demo
// -----------------------------------
    $(function () {

        // CHOSEN
        // -----------------------------------

        $('.chosen-select').chosen();

        // MASKED
        // -----------------------------------

        $('[data-masked]').inputmask();

        // FILESTYLE
        // -----------------------------------

        $('.filestyle').filestyle();

        // WYSIWYG
        // -----------------------------------

        $('.wysiwyg').wysiwyg();

        // only time
        $('#datetimepicker2').datetimepicker({
            locale: 'ru',
            format: 'LT'
        });

        spinner = new Spinner({
            lines: 13, // The number of lines to draw
            length: 20, // The length of each line
            width: 10, // The line thickness
            radius: 30, // The radius of the inner circle
            corners: 1, // Corner roundness (0..1)
            rotate: 0, // The rotation offset
            direction: 1, // 1: clockwise, -1: counterclockwise
            color: '#23b7e5', // #rgb or #rrggbb or array of colors
            speed: 1, // Rounds per second
            trail: 60, // Afterglow percentage
            shadow: false, // Whether to render a shadow
            hwaccel: false, // Whether to use hardware acceleration
            className: 'spinner', // The CSS class to assign to the spinner
            zIndex: 2e9, // The z-index (defaults to 2000000000)
            top: '50%', // Top position relative to parent
            left: '50%' // Left position relative to parent
        });
        loader = document.getElementById('loader');

        if ($('#upload-btn').length) {
            avatarUploader = new ss.SimpleUpload({
                button: 'upload-btn',
                url: '/ajax/upload/avatar',
                dropzone: 'dz',
                name: 'avatar',
                responseType: 'json',
                multipart: true,
                maxUploads: 1,
                queue: false,
                debug: false,
                encodeCustomHeaders: true,
                allowedExtensions: ['jpg', 'jpeg', 'png', 'gif', 'bmp'],
                accept: 'image/*',
                maxSize: 2048,
                onComplete: function (filename, response) {
                    if (response.status) {
                        $('.photo').attr('src', response.avatar);
                        swal("Успех", response.message, "success");
                    } else {
                        swal("Ошибка", 'Ошибка при загрузке аватара', "error");
                    }

                    hideLoader(loader);
                    $('#a-upload-progress').html('');
                },
                onSizeError: function () {
                    swal("Ошибка", 'Размер файла не должен превышать 2 МБ', "error");

                    hideLoader(loader);
                },
                onError: function () {
                    swal("Ошибка", 'Ошибка при загрузке аватара', "error");

                    hideLoader(loader);
                },
                onProgress: function (pct) {
                    $('#a-upload-progress').html('| загрузка: ' + pct + '%');
                },
                startXHR: function () {
                    showLoader(loader);
                },
                startNonXHR: function () {
                    showLoader(loader);
                }
            });
        }

        var links = $('.check-link');
        if (links.length > 0) {
            $.each(links, function (i, e) {
                checkUrl($(e).attr('href'), $(e));
            });
        }

        $(document).on('click', '.likes .client-icons', function () {
            var self = $(this);

            $('.client-icons').removeClass('active');
            showLoader(loader);

            $.post('/ajax/user/like', {
                uid: $(this).parent().attr('data-id'),
                action: $(this).attr('data-action')
            }, function (r) {
                hideLoader(loader);

                if (r.status) {
                    if (r.unset == 0) {
                        self.addClass('active');

                        swal("Сохранено!", "", "success");
                    } else {
                        swal("Сохранено!", "Вы убрали отметку", "success");
                    }
                }
            });
        });

        $('#save-client-profile').on('click', function (e) {
            e.preventDefault();
            var form = $('form[name=client]'),
                    instance = form.parsley();

            var data = {};
            form.find('input, textarea, select').serializeArray().map(function (x) {
                data[x.name] = x.value;
            });

            if (instance.isValid()) {
                showLoader(loader);

                $.post('/ajax/client/profile', data, function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        $('#form-errors').fadeOut();
                        swal("Сохранено", "Профиль клиента успешно сохранен!", "success");
                    } else {
                        $('#form-errors strong').html('');

                        for (var i = 0; i < r.errors.length; i++) {
                            var html = $('#form-errors strong').html();
                            $('#form-errors strong').html(html + r.errors[i] + '<br>');
                        }

                        $('#form-errors').fadeIn();
                        swal("Ошибка", "Произошла ошибка при сохранении :(", "error");
                    }
                });
            } else {
                swal("Ошибка", "Убедитесь в правильности заполненных данных", "error");
            }
        });

        $('.save-perms').on('click', function (e) {
            e.preventDefault();
            var form = $(this).closest('form[name=perms]');

            var data = {};
            form.find('input').serializeArray().map(function (x) {
                data[x.name] = x.value;
            });

            showLoader(loader);

            $.post('/ajax/settings/roles', data, function (r) {
                hideLoader(loader);

                if (r.status) {
                    $('#form-errors').fadeOut();
                    swal("Сохранено", "Права обновлены!", "success");
                } else {
                    $('#form-errors strong').html('');

                    for (var i = 0; i < r.errors.length; i++) {
                        var html = $('#form-errors strong').html();
                        $('#form-errors strong').html(html + r.errors[i] + '<br>');
                    }

                    $('#form-errors').fadeIn();
                    swal("Ошибка", "Произошла ошибка при сохранении :(", "error");
                }
            });
        });

        $('#add-notify').on('click', function (e) {
            e.preventDefault();
            var form = $(this).closest('form[name=notify]');

            var data = {};
            form.find('input, select, textarea').serializeArray().map(function (x) {
                data[x.name] = x.value;
            });

            showLoader(loader);

            $.post('/ajax/notify/add', data, function (r) {
                hideLoader(loader);

                if (r.status) {
                    swal("Сохранено", "Уведомление добавлено!", "success");

                    form.find('input, textarea').val('');

                    $('#update-notify').trigger('click');
                } else {
                    swal("Ошибка", "Произошла ошибка при добавлении :(", "error");
                }
            });
        });

        $('.i-agree').on('click', function (e) {
            e.preventDefault();
            var self = $(this);

            var data = {
                id: $(this).attr('data-id')
            };

            showLoader(loader);

            $.post('/ajax/notify/agree', data, function (r) {
                hideLoader(loader);

                if (r.status) {
                    self.closest('.panel').remove();
                } else {
                    swal("Ошибка", "Произошла ошибка :(", "error");
                }
            });
        });

        $('#update-notify').on('click', function (e) {
            $('#notify-loader').toggleClass('whirl');

            var data = {};
            data.type = $(this).attr('data-type');

            $.post('/ajax/notify/get', data, function (r) {
                if (r.html) {
                    $('#notifications').html(r.html);
                    $('#notify-loader').toggleClass('whirl');
                }
            });
        });

        $(document).on('change', '#c-funds-refund select[name=payment]', function () {
            $('#refund-currency').html($("option:selected", this).attr('data-currency'));
        });

        $(document).on('change', 'select[name=on-page]', function (e) {
            $('#notify-loader').toggleClass('whirl');

            var data = {};
            data.type = $('#update-notify').attr('data-type');

            $.post('/ajax/notify/get/' + $(this).val(), data, function (r) {
                if (r.html) {
                    $('#notifications').html(r.html);
                    $('#notify-loader').toggleClass('whirl');
                }
            });
        });

        $('#save-user-filter').on('click', function (e) {
            e.preventDefault();
            var form = $('form[name=user-filter]'),
                    instance = form.parsley();

            var data = {};
            form.find('input, textarea, select').serializeArray().map(function (x) {
                data[x.name] = x.value;
            });

            if (instance.isValid()) {
                showLoader(loader);

                $.post('/ajax/filter/save', data, function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        swal("Сохранено", "Фильтр успешно сохранен!", "success");
                        window.location.reload();
                    } else {
                        $('#form-errors strong').html('');

                        for (var i = 0; i < r.errors.length; i++) {
                            var html = $('#form-errors strong').html();
                            $('#form-errors strong').html(html + r.errors[i] + '<br>');
                        }

                        $('#form-errors').fadeIn();
                        swal("Ошибка", "Произошла ошибка при сохранении :(", "error");
                    }
                });
            } else {
                swal("Ошибка", "Убедитесь в правильности заполненных данных", "error");
            }
        });

        $('#add-user').on('click', function (e) {
            e.preventDefault();
            var form = $('form[name=user]'),
                    instance = form.parsley();

            var data = {};
            form.find('input, textarea, select').serializeArray().map(function (x) {
                data[x.name] = x.value;
            });

            if (instance.isValid()) {
                showLoader(loader);

                $.post('/ajax/user/add', data, function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        $('#form-errors').fadeOut();
                        swal("Готово", "Пароль пользователя: " + r.password, "success");
                    } else {
                        $('#form-errors strong').html('');

                        for (var i = 0; i < r.errors.length; i++) {
                            var html = $('#form-errors strong').html();
                            $('#form-errors strong').html(html + r.errors[i] + '<br>');
                        }

                        $('#form-errors').fadeIn();
                        swal("Ошибка", "Произошла ошибка при добавлении :(", "error");
                    }
                });
            } else {
                swal("Ошибка", "Убедитесь в правильности заполненных данных", "error");
            }
        });

        $('button[name=payFromAccount]').on('click', function (e) {
            e.preventDefault();
            var form = $('form[name=pay-project]'),
                    instance = form.parsley();

            var data = {};
            form.find('input').serializeArray().map(function (x) {
                data[x.name] = x.value;
            });

            if (instance.isValid()) {
                showLoader(loader);

                $.post('/ajax/project/pay', data, function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        swal("Успешно оплачено", "", "success");

                        window.location.href = r.url;
                    } else {
                        $('#form-errors').fadeIn();
                        swal("Ошибка", "Произошла ошибка, обратитесь к менеджеру", "error");
                    }
                });
            } else {
                swal("Ошибка", "Убедитесь в правильности заполненных данных", "error");
            }
        });

        // Сделаем форму тех. дока валидируемой(((
        $('#techDocForm').parsley();
        // Костыль для нового дизайна
        $('button[name=payFromAccountNew]').on('click', function (e) {
            e.preventDefault();
            var form = $('#techDocForm'),
                instance = form.parsley();

            var data = {};
            form.find('input').serializeArray().map(function (x) {
                data[x.name] = x.value;
            });

            if (instance.isValid()) {
                showLoader(loader);

                $.post('/ajax/project/pay', data, function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        swal("Успешно оплачено", "", "success");
                        if (r.paid) {
                            window.location.replace("http://service.referr.ru/project/all");
                        } else {
                            window.location.href = r.url;
                        }
                    } else {
                        $('#form-errors').fadeIn();
                        swal("Ошибка", "Произошла ошибка, обратитесь к менеджеру", "error");
                    }
                });
            } else {
                swal("Ошибка", "Убедитесь в правильности заполненных данных", "error");
            }
        });

        $('#save-tariff').on('click', function (e) {
            e.preventDefault();
            var form = $('form[name=tariff]'),
                    instance = form.parsley();

            var data = {};
            form.find('input, textarea, select').serializeArray().map(function (x) {
                data[x.name] = x.value;
            });

            if (instance.isValid()) {
                showLoader(loader);

                $.post('/ajax/tariff/add', data, function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        $('#form-errors').fadeOut();
                        swal("Сохранено", "Тариф успешно добавлен!", "success");
                        //		console.log(r)
                        window.location.replace("http://service.referr.ru/user/edit/" + r.client);
                        $.jgrid.gridUnload('table-1');
                        $('#table-1').jqGrid(jgridSettingsCopy);
                        $('#table-1').jqGrid('hideCol', 'cb');
                    } else {
                        $('#form-errors strong').html('');

                        for (var i = 0; i < r.errors.length; i++) {
                            var html = $('#form-errors strong').html();
                            $('#form-errors strong').html(html + r.errors[i] + '<br>');
                        }

                        $('#form-errors').fadeIn();
                        swal("Ошибка", "Произошла ошибка при сохранении :(", "error");
                    }
                });
            } else {
                swal("Ошибка", "Убедитесь в правильности заполненных данных", "error");
            }
        });

        $('form[name="poster-project-decline"]').on('submit', function (e) {
            e.preventDefault();
            var form = $(this),
                    instance = form.parsley();

            var data = {};
            form.find('input, textarea').serializeArray().map(function (x) {
                data[x.name] = x.value;
            });

            if (instance.isValid()) {
                showLoader(loader);
                $('#poster-project-decline').modal('hide');

                $.post('/ajax/poster/decline_project', data, function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        swal("Заявка отправлена", "", "success");

                        $('#poster-project-decline').modal('hide');
                    } else {
                        if (r.exist) {
                            swal("Ошибка", "Ваша заявка уже на рассмотрении", "error");
                        } else {
                            swal("Ошибка", "Произошла ошибка", "error");
                        }
                    }
                });
            } else {
                swal("Ошибка", "Убедитесь в правильности заполненных данных", "error");
            }
        });

        $('form[name="poster-refund"]').on('submit', function (e) {
            e.preventDefault();
            var form = $(this),
                    instance = form.parsley();

            var data = {};
            form.find('input, textarea').serializeArray().map(function (x) {
                data[x.name] = x.value;
            });

            if (instance.isValid()) {
                showLoader(loader);
                $('#poster-refund').modal('hide');

                $.post('/ajax/poster/money_sent', data, function (r) {
                    hideLoader(loader);
                    if (r.status == 1) {
                        table1.jqGrid("setCell", data['id'], "to_pay", 'Оплачено');
                        table1.jqGrid("setCell", data['id'], "action", data['refund_details']);

                        swal("Успешно", "", "success");
                    } else if(r.status == 2) {
                        swal("Ошибка", r.message, "error");
                    } else {
                        swal("Ошибка", "Произошла ошибка", "error");
                    }
                });
            } else {
                swal("Ошибка", "Убедитесь в правильности заполненных данных", "error");
            }
        });

        $('form[name="user-refund"]').on('submit', function (e) {
            e.preventDefault();
            var form = $(this),
                    instance = form.parsley();

            var data = {};
            form.find('input').serializeArray().map(function (x) {
                data[x.name] = x.value;
            });

            if (instance.isValid()) {
                showLoader(loader);
                $('#poster-project-decline').modal('hide');

                $.post('/ajax/poster/withdraw', data, function (r) {
                    hideLoader(loader);
                    console.log(r);
                    if (typeof r.payed != 'undefined' && typeof r.toPay != 'undefined') {
                        $('#willPayed').html(r.willPayed);
                        $('#payed').html(r.payed);
                        $('#toPay').html(r.toPay);
                    }

                    if (r.status) {
                        form.find('input').val('');

                        swal("Заявка на вывод денег отправлена", "Вы будете уведомлены о переводе средств на Ваш счет", "success");
                    } else {
                        if (r.notEnough) {
                            swal("Ошибка", "Запрошенное количество денег на вывод не должно превышать указанное значение средств", "error");
                        } else if (r.lowAmount) {
                            swal("Ошибка", "Запрошенное количество денег на вывод слишком мало — попробуйте ввести сумму больше", "error");
                        } else if (r.emptyCredentials) {
                            swal("Ошибка", r.emptyCredentialsError, "error");
                        } else {
                            swal("Ошибка", "Пожалуйста, свяжитесь с модератором для выяснения причины", "error");
                        }
                    }
                }).fail(function() {
    alert( "error" );
  });
            } else {
                swal("Ошибка", "Убедитесь в правильности заполненных данных", "error");
            }
        });

        $('form[name="fire-poster"]').on('submit', function (e) {
            e.preventDefault();
            var form = $(this),
                    instance = form.parsley();

            var data = {};
            form.find('input, textarea').serializeArray().map(function (x) {
                data[x.name] = x.value;
            });

            if (instance.isValid()) {
                showLoader(loader);

                $.post('/ajax/poster/fire', data, function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        swal("Постер уволен", "", "success");

                        window.location.reload();
                    } else {
                        swal("Ошибка", "Произошла ошибка", "error");
                    }
                });
            } else {
                swal("Ошибка", "Убедитесь в правильности заполненных данных", "error");
            }
        });

        $('form[name="project-decline"]').on('submit', function (e) {
            e.preventDefault();
            var form = $(this),
                    instance = form.parsley();

            var data = {};
            form.find('input, textarea').serializeArray().map(function (x) {
                data[x.name] = x.value;
            });

            if (instance.isValid()) {
                showLoader(loader);
                $('#project-decline').modal('hide');

                $.post('/ajax/notify/add', {
                    role: "poster",
                    text: data['decline_reason'],
                    agree: "on",
                    declineId: data['id']
                }, function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        swal("Отправлено", "", "success");

                        window.location.reload();
                    } else {
                        swal("Ошибка", "Произошла ошибка :(", "error");
                    }
                });
            } else {
                swal("Ошибка", "Убедитесь в правильности заполненных данных", "error");
            }
        });

        $(this).on('click', '#rm-avatar', function () {
            showLoader(loader);

            $.post('/ajax/unset/avatar', function (response) {
                if (response.status) {
                    $('.photo').attr('src', response.avatar);
                    swal("Успех", response.message, "success");
                } else {
                    swal("Ошибка", response.message, "error");
                }

                hideLoader(loader);
            });
        });

        $('form[name=replace-link-operation]').on('submit', function (e) {
            e.preventDefault();

            $('#' + $('input[name=trigger]').val()).trigger('click');
        });

        $('form[name=replace-link-request]').on('submit', function (e) {
            e.preventDefault();

            var form = $(this),
                    instance = form.parsley();

            if (instance.isValid()) {
                changeLinkStatus($('input[name=linkId]').val(), $('input[name=linkPrevStatus]').val(), $('input[name=linkStatus]').val(), 1);
            } else {
                swal("Ошибка", "Убедитесь в правильности заполненных данных", "error");
            }
        });

        $('form[name=link-actions]').on('submit', function (e) {
            e.preventDefault();
            var $button = $(this).find("button[type=submit]:focus"),
                    status = parseInt($button.attr('data-status')),
                    reason = $.trim($('textarea[name=link_actions_decline_reason]').val());

            if (status > 2) {
                if (reason > '') {
                    $('textarea[name=decline_reason_request]').val(reason);

                    changeLinkStatus($('input[name=actionlinkId]').val(), $('input[name=actionLinkPrevStatus]').val(), status, 1);
                } else {
                    swal("Ошибка", "Необходимо ввести причину замены", "error");
                }
            } else {
                changeLinkStatus($('input[name=actionlinkId]').val(), $('input[name=actionLinkPrevStatus]').val(), status, 1);
            }
        });

        $('form[name=links-import]').on('submit', function (e) {
            if (!formWithoutErrors) {
                e.preventDefault();
            } else
                return 1;

            var form = $(this),
                    instance = form.parsley();

            showLoader(loader);

            if (instance.isValid()) {
                if (form.find('input[type=text]').length == 0) {
                    hideLoader(loader);
                    swal("Ошибка", "Нечего импортировать", "error");
                } else {
                    formWithoutErrors = 1;
                    $('form[name=links-import]').trigger('submit');
                }
            } else {
                hideLoader(loader);
                swal("Ошибка", "Убедитесь в правильности заполненных данных", "error");
            }
        });

        $('form[name=course-client]').on('submit', function (e) {
            e.preventDefault();

            var form = $(this),
                    instance = form.parsley(),
                    data = {};

            showLoader(loader);

            if (instance.isValid()) {
                form.find('input').serializeArray().map(function (x) {
                    data[x.name] = x.value;
                });


                $.post('/ajax/funds/course/client', data, function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        swal("Сохранено", "", "success");

                        updateCurrencyHistory('client');
                    } else {
                        swal("Ошибка", "Произошла ошибка при сохранении :(", "error");
                    }
                });
            } else {
                hideLoader(loader);
                swal("Ошибка", "Убедитесь в правильности заполненных данных", "error");
            }
        });

        $('form[name=course-poster]').on('submit', function (e) {
            e.preventDefault();

            var form = $(this),
                    instance = form.parsley(),
                    data = {};

            showLoader(loader);

            if (instance.isValid()) {
                form.find('input').serializeArray().map(function (x) {
                    data[x.name] = x.value;
                });


                $.post('/ajax/funds/course/poster', data, function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        swal("Сохранено", "", "success");

                        updateCurrencyHistory('poster');
                    } else {
                        swal("Ошибка", "Произошла ошибка при сохранении :(", "error");
                    }
                });
            } else {
                hideLoader(loader);
                swal("Ошибка", "Убедитесь в правильности заполненных данных", "error");
            }
        });

        $('form[name=client-funds]').on('submit', function (e) {
            e.preventDefault();

            var form = $(this),
                    instance = form.parsley(),
                    data = {};

            showLoader(loader);

            if (instance.isValid()) {
                form.find('input, select').serializeArray().map(function (x) {
                    data[x.name] = x.value;
                });

                $.post('/ajax/client/money_manipulation', data, function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        swal("Успешно", "", "success");

                        if (data['type'] == 'refund') {
                            $('#c-funds-refund').modal('hide');
                        } else {
                            $('#c-funds-replenish').modal('hide');
                        }

                        $('.modal-backdrop').fadeOut();
                    } else {
                        swal("Ошибка", "Произошла ошибка при сохранении :(", "error");
                    }
                });
            } else {
                hideLoader(loader);
                swal("Ошибка", "Убедитесь в правильности заполненных данных", "error");
            }
        });

        $(document).on('change', 'select[name=posters-filter], select[name=type-filter]', function () {
            filterPosters($(this));
        });

        $(document).on('change', 'select[name=link_types]', function () {
            var data = {};
            data.val = $(this).val();
            data.id = $(this).attr('data-link');

            showLoader(loader);

            $.post('/ajax/link/type', data, function (r) {
                hideLoader(loader);

                if (r.status) {
                    //swal("Сохранено", "", "success");
                    table2.jqGrid("setCell", data.id, "type", r.cell);
                } else {
                    swal("Ошибка", "Произошла ошибка при сохранении :(", "error");
                }
            });
        });

        $(document).on('change', 'input[name=factor]', function () {
            var data = {};
            // data.val = $(this).val();
            data.id = $(this).attr('data-link');

            if ($(this).is(":checked")) {
                data.val = 2;
            } else {
                data.val = 1;
            }
            showLoader(loader);

            $.post('/ajax/link/factor', data, function (r) {
                hideLoader(loader);

                if (r.status) {
                    swal("Сохранено", "", "success");
                    var price = parseFloat(table2.jqGrid("getCell", data.id, "price"));

                    if (data.val == 1) {
                        table2.jqGrid("setCell", data.id, "price", price / 2);
                    } else {
                        table2.jqGrid("setCell", data.id, "price", price * 2);
                    }
                } else {
                    swal("Ошибка", "Произошла ошибка при сохранении :(", "error");
                }
            });
        });

        $(document).on('click', '.dd-handle', function () {
            $('.dd-handle').removeClass('current');
            $(this).addClass('current');

            $(this).find('input').prop('checked', true);
        });

        $('input[type=radio][name=membership]').on('click', function () {
            $('.dd-handle').removeClass('current');
            $(this).closest('.dd-handle').addClass('current');
        });

        if (window.location.hash) {
            $('a[href=' + window.location.hash + ']').trigger('click');
        }

        $('[data-scrollable]').each(function () {
            var element = $(this);

            element.slimScroll({
                height: (typeof element.attr('data-height') != 'undefined') ? element.attr('data-height') + 'px' : 'auto',
                railVisible: false,
                alwaysVisible: false
            });

            element.show();
        });

        $(".sidebar-subnav li.active a, a.menu-current, a.active").replaceWith(function () {
            return $("<span class='active-not-link'>" + $(this).html() + "</span>");
        });

        var datepickers = ['regDate', 'created', 'start', 'finish', 'startDate', 'finishDate', 'customFilter'];

        $.each(datepickers, function (i, name) {
            $("input[name=" + name + "From]").on("dp.change", function (e) {
                if (e.date) {
                    $("input[name=" + name + "To]").data("DateTimePicker").minDate(e.date);
                }
            });

            $("input[name=" + name + "To]").on("dp.change", function (e) {
                if (e.date) {
                    $("input[name=" + name + "From]").data("DateTimePicker").maxDate(e.date);
                }
            });
        });

        $("input[name=from]").on("dp.change", function (e) {
            $("input[name=to]").data("DateTimePicker").minDate(e.date);
        });

        $("input[name=to]").on("dp.change", function (e) {
            $("input[name=from]").data("DateTimePicker").maxDate(e.date);
        });

        $("#date_create").on("dp.change", function (e) {
            $("#date_update").data("DateTimePicker").minDate(e.date);
        });

        $("#date_update").on("dp.change", function (e) {
            $("#date_create").data("DateTimePicker").maxDate(e.date);
        });

        $('#client-smile').mouseenter(function () {
            if (!$('#manager-info').is(":visible")) {
                $('#manager-info').fadeIn();

                clearTimeout(smileTimeout);
                smileTimeout = setTimeout(function () {
                    $('#manager-info').fadeOut();
                }, 5000);
            }
        });

        $('#client-smile').click(function () {
            if (!$('#manager-info').is(":visible")) {
                $('#manager-info').fadeIn();

                clearTimeout(smileTimeout);
                smileTimeout = setTimeout(function () {
                    $('#manager-info').fadeOut();
                }, 5000);
            }
        });

        $('#manager-info').mouseenter(function () {
            clearTimeout(smileTimeout);
        });

        $(this).on('mousedown', function (event) {
            // Close smile
            if (!$(event.target).closest('#manager-info').length) {
                if ($('#manager-info').is(":visible")) {
                    $('#manager-info').fadeOut();
                }
            }
        });

        $(window).scroll(function () {
            $('#manager-info').fadeOut();
        });

        $('.chosen-search').hide();
        $('.show-chosen-search .chosen-search').show();

        if ($("textarea").length > 0) {
            autosize($("textarea"));
        }
    });

    // $(window).on('resize', function () {
    //     tableResize();
    // }).resize();


    $(document).on('mouseenter', '.likes .fa-star-o, .likes .fa-star', function () {
        for (var i = 1; i <= 5; i++) {
            $(this).parent().find('.fa.fa-star.star.s' + i).attr('class', 'fa fa-star-o star s' + i);
        }

        for (i = 1; i <= parseInt($(this).attr('data-value')); i++) {
            $(this).parent().find('.fa.fa-star-o.star.s' + i).attr('class', 'fa fa-star star s' + i);
        }
    });

    $(document).on('mouseleave', '.likes .fa-star', function () {
        $(this).parent().find('.fa-star').removeClass('fa-star').addClass('fa-star-o');

        if (!$(this).parent().hasClass('no-star') && typeof lastStar != 'undefined') {
            for (var i = 1; i <= parseInt(lastStar); i++) {
                $(this).parent().find('.fa.fa-star-o.star.s' + i).attr('class', 'fa fa-star star s' + i);
            }
        }
    });

    $(document).on('click', '#reset-filter', function () {
        $('form[name=user-filter] input').val('');
        $('form[name=user-filter] select').prop('selectedIndex', 0);

        currentTable.api().search('')
                .columns().search('')
                .draw();
    });

    $(document).on('click', '.likes .fa-star, .likes .fa-star-o', function () {
        var self = $(this);

        $(this).parent().find('.fa-star').removeClass('fa-star').addClass('fa-star-o');

        showLoader(loader);

        $.post('/ajax/user/rank', {
            uid: $(this).parent().attr('data-id'),
            rank: $(this).attr('data-value')
        }, function (r) {
            hideLoader(loader);

            if (r.status) {
                if (r.unset == 0) {
                    self.parent().removeClass('no-like');

                    lastStar = self.attr('data-value');

                    for (var i = 1; i <= parseInt(self.attr('data-value')); i++) {
                        self.parent().find('.fa.fa-star-o.star.s' + i).attr('class', 'fa fa-star star s' + i);
                    }

                    swal("Сохранено!", "", "success");
                } else {
                    self.parent().addClass('no-like');

                    for (var i = 1; i <= parseInt(self.attr('data-value')); i++) {
                        self.parent().find('.fa.fa-star.star.s' + i).attr('class', 'fa fa-star-o star s' + i);
                    }

                    if (typeof lastStar != 'undefined') {
                        delete lastStar;
                    }

                    swal("Сохранено!", "Вы убрали отметку", "success");
                }

                $('.tooltip').hide();
            }
        });
    });

    $(document).on('submit', 'form[name=g-interval]', function (e) {
        e.preventDefault();

        var form = $(this), data = {};

        form.find('input, select').serializeArray().map(function (x) {
            data[x.name] = x.value;
        });

        if (data['graphPeriod'] == 'interval') {
            if (!$.trim(data['from']) > '' || !$.trim(data['to']) > '') {
                swal("Ошибка", "Введите период", "error");

                return;
            }
        }

        showLoader(loader);

        $.post('/ajax/graph', {
            pid: data['pid'],
            interval: data['graphPeriod'],
            dateFrom: data['from'],
            dateTo: data['to'],
            type: data['type']
        }, function (r) {
            hideLoader(loader);

            if (r.status) {
                var gp = [
                    {
                        "label": "Принято",
                        "color": "#27c24c",
                        "data": r.graph.plot.client_accepted
                    },
                    {
                        "label": "Одобрено модератором",
                        "color": "#7266ba",
                        "data": r.graph.plot.admin_accepted
                    },
                    {
                        "label": "Модерация на доноре",
                        "color": "#3a3f51",
                        "data": r.graph.plot.moderation
                    }
                ];

                $('#graph').html('');

                $.plot($('#graph'), gp, graphOptions);
            }
        });
    });

    $(document).on('click', 'a[href=#filter]', function (e) {
        $('#rm-filter').hide();
    });

    $(document).on('submit', 'form[name=edit-link]', function (e) {
        e.preventDefault();

        var form = $(this);
        var data = {};

        form.find('input, textarea').serializeArray().map(function (x) {
            data[x.name] = x.value;
        });

        showLoader(loader);

        $.post('/ajax/link/edit', data, function (r) {
            hideLoader(loader);
            console.log(r);
            $('#edit-link').modal('hide');
            $('.modal-backdrop').fadeOut();

            if (r.status) {
                swal("Сохранено!", "", "success");

                table2.jqGrid("setCell", data.lid, "urlHolder", data.editUrlHolder);
                table2.jqGrid("setCell", data.lid, "anchor", data.editAnchor);
                table2.jqGrid("setCell", data.lid, "url", data.editUrl);
                table2.jqGrid("setCell", data.lid, "comment", data.editComment);
                table2.jqGrid("setCell", data.lid, "status", r.cellStatus);
                table2.jqGrid("setCell", data.lid, "reason", '');
            } else {
                if (typeof r.active != 'undefined') {
                    swal("Ошибка", "Ссылка недоступна для редактирования", "error");
                } else {
                    swal("Ошибка", "", "error");
                }
            }
        });
    });

    $(document).on('change', '#notifications select[name=period]', function (e) {
        filterNotifications();
    });

    $(document).on('change', 'select[name="country[]"][data-type=create]', function (evt, params) {
        var selected = $('select[name="country[]"]').val();

        if (selected && selected.length && 'selected' in params) {
            if (selected.length == 1) {
                showLoader(loader);

                $.post('/ajax/project_countries/' + params.selected, function (r) {
                    hideLoader(loader);
                    var select = $('select[name="country[]"]');
                    select.html(r.options);
                    select.trigger('chosen:updated');
                });
            }
        } else {
            if (!selected) {
                showLoader(loader);
                $.post('/ajax/project_countries/0', function (r) {
                    hideLoader(loader);
                    var select = $('select[name="country[]"]');
                    select.html(r.options);
                    select.trigger('chosen:updated');
                });
            }
        }
    });

    // $('.nav-tabs li:first-child, .tab-content > div:first-child').addClass('active');
}(window, document, $, undefined));

$.jgrid.styleUI.Bootstrap.base.rowTable = "table table-bordered table-striped";

var table1 = $("#table-1"),
        table2 = $("#table-2"),
        table3 = $("#table-3"),
        table4 = $("#table-4"),
        table5 = $("#table-5"),
        smileTimeout,
        datepickerSettings = {
            icons: {
                time: 'fa fa-clock-o',
                date: 'fa fa-calendar',
                up: 'fa fa-chevron-up',
                down: 'fa fa-chevron-down',
                previous: 'fa fa-chevron-left',
                next: 'fa fa-chevron-right',
                today: 'fa fa-crosshairs',
                clear: 'fa fa-trash'
            },
            locale: 'ru',
            viewMode: 'months',
            format: 'DD.MM.YYYY'
        },
        changeStatusInvoice = function (id, type) {

            if (type == 'original') {
                let el = $('#order-originals-'+id);
                swal({
                    html: true,
                    title: "Отправка оригинала акта выполненных работ",
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Запросить оригиналы",
                    allowOutsideClick: true,
                    text: '<div id="original-form">' +
                        '<div class="form-group">\n' +
                        '    <label for="originalFIO">ФИО получателя</label>\n' +
                        '    <input type="text" value="'+el.data('user_fio')+'" class="form-control" id="originalFIO" placeholder="">\n' +
                        '  </div>\n' +
                        '  <div class="form-group">\n' +
                        '    <label for="originalADR">Адрес доставки документов</label>\n' +
                        '    <input type="text" value="'+el.data('user_addres')+'" class="form-control" id="originalADR" placeholder="">\n' +
                        '  </div>' +
                        '<div class="form-group">\n' +
                        '    <label for="originalPHONE">Контактный телефон получателя</label>\n' +
                        '    <input type="text" value="'+el.data('user_phone')+'" class="form-control" id="originalPHONE" placeholder="">\n' +
                        '  </div>' +
                        '<div class="form-group">\n' +
                        '    <label for="originalSHIP">Срочность доставки</label>\n' +
                        '    <select id="originalSHIP" class="form-control">\n' +
                        '  <option value="Не срочно">Не срочно</option>\n' +
                        '  <option value="До конца месяца">До конца месяца</option>\n' +
                        '  <option value="Как можно скорее">Как можно скорее</option>\n' +
                        '</select>\n' +
                        '  </div></div>',
                }, function (isConfirm) {
                    if (isConfirm) {
                        var data = {
                            id: id,
                            type: type,
                            field: {
                                originalFIO: $('#originalFIO').val(),
                                originalADR: $('#originalADR').val(),
                                originalPHONE: $('#originalPHONE').val(),
                                originalSHIP: $('#originalSHIP').val()
                            }
                        };
                        $.post('/change_status_invoice', data, function (r) {
                            if (r.status) {
                                swal("Статус изменен", "", "success");
                                $('#status-invoise-' + r.invoice_id).text(r.statusName);
                                $('#order-originals-' + r.invoice_id).remove();
                            } else {
                                swal("Ошибка", "Произошла ошибка");
                            }
                        });
                    }
                });

            } else {
                var data = {
                    id: id,
                    type: type
                };
                $.post('/change_status_invoice', data, function (r) {
                    if (r.status) {
                        swal("Статус изменен", "", "success");
                        $('#status-invoise-' + r.invoice_id).text(r.statusName);
                        $('#order-originals-' + r.invoice_id).remove();
                    } else {
                        swal("Ошибка", "Произошла ошибка");
                    }
                });
            }
        },
        referalGetPay = function (uid) {
            showLoader(loader);

            var propsType = $('#props-type option:checked').val();

            var props = $('#props').val();

            $.post('/ajax/referal_get_payments/' + uid, {uid: uid, props: props, propsType: propsType}, function (r) {
                console.log(r);
                if (r.status) {
                    $('#referalGetPay').attr("disabled", "disabled");
                    swal("Ок!", "Запрос на выплату принят!", "success");
                } else {
                    swal("Ошибка", "Произошла ошибка при отправке :(", "error");
                }

                hideLoader(loader);
            })
        },
        referalPaymentsPay = function (uid) {
            showLoader(loader);

            $.post('/ajax/referal_payments_pay/' + uid, {uid: uid}, function (r) {
                console.log(r);
                if (r.status) {
                    $('#payuser' + uid).hide('fast');
                } else {
                    swal("Ошибка", "Произошла ошибка при отправке :(", "error");
                }

                hideLoader(loader);
            })
        },
        sendComment = function (id) {
            showLoader(loader);

            $.post('/ajax/project_comment', {id: id, text: $('.wysiwyg').html()}, function (r) {
                if (r.status) {
                    $('.wysiwyg').html('');
                    $('#comments').html(r.comments);
                } else {
                    swal("Ошибка", "Произошла ошибка при отправке :(", "error");
                }

                hideLoader(loader);
            })
        },
        sendUserComment = function (uid) {
            showLoader(loader);

            $.post('/ajax/project_comment', {uid: uid, text: $('.wysiwyg').html()}, function (r) {
                if (r.status) {
                    $('.wysiwyg').html('');
                    $('#comments').html(r.comments);
                } else {
                    swal("Ошибка", "Произошла ошибка при отправке :(", "error");
                }

                hideLoader(loader);
            })
        },
        loadComplete = function () {
            setTimeout(function () {
                if ($('.smallGraph').length > 0) {
                    $.each($('.smallGraph'), function (i, el) {
                        // line chart, with a bullet at the end
                        var chart = new AmCharts.AmSerialChart();
                        chart.dataProvider = JSON.parse($(el).attr('data-plot'));
                        chart.categoryField = "day";
                        chart.autoMargins = false;
                        chart.marginLeft = 0;
                        chart.marginRight = 5;
                        chart.marginTop = 0;
                        chart.marginBottom = 0;

                        var graph = new AmCharts.AmGraph();
                        graph.valueField = "value";
                        graph.bulletField = "bullet";
                        graph.showBalloon = false;
                        graph.lineColor = "#a9ec49";
                        chart.addGraph(graph);

                        var valueAxis = new AmCharts.ValueAxis();
                        valueAxis.gridAlpha = 0;
                        valueAxis.axisAlpha = 0;
                        chart.addValueAxis(valueAxis);

                        var categoryAxis = chart.categoryAxis;
                        categoryAxis.gridAlpha = 0;
                        categoryAxis.axisAlpha = 0;
                        categoryAxis.startOnAxis = true;

                        chart.write($(el).attr('id'));
                    });
                }

                if ($('input[name=client]').length > 0 && $('input[name=client]').val() > '') {
                    $('input[name=client]').trigger('change');
                }

                if ($("form[name=user-filter] input[type=checkbox]").length > 0) {
                    $("form[name=user-filter] input[type=checkbox]").trigger('change');
                }
            }, 500);
        },
        jgridSettings = {
            url: '/ajax/clients/all',
            colModel: [],
            datatype: "json",
            loadonce: true,
            autowidth: true,
            multiselect: true,
            viewrecords: true,
            rowNum: 10,
            rowList: [10, 50, 100, 1000],
            height: '100%',
            pager: "#tablePager-1",
            loadComplete: loadComplete,
            // beforeProcessing: function (data) {
            //     var i, foundPrescription = false;
            //     var count_t = 0;
            //     var count_s = 0;
            //     var count_ags = 0;
            //     var count_cy = 0;
            //     var count_wasAgs = 0;
            //     var count_swVisits = 0;
            //     var count_mjTF = 0;
            //     var count_alexaTrafRank = 0;
            //     var count_markets = 0;
            //     var count_liVisitors = 0;
            //     var count_message = 0;
            //
            //     if (data.rows != null) {
            //         for (i = 0; i < data.rows.length; i++) {
            //             if (data.rows[i].checkTrust == '' || data.rows[i].checkTrust == null) { // if not empty string
            //                 count_t++;
            //             }
            //             if (data.rows[i].spam == '' || data.rows[i].spam == null) { // if not empty string
            //                 count_s++;
            //             }
            //             if (data.rows[i].ags == '' || data.rows[i].ags == null) { // if not empty string
            //                 count_ags++;
            //             }
            //             if (data.rows[i].cy == '' || data.rows[i].cy == null) { // if not empty string
            //                 count_cy++;
            //             }
            //             if (data.rows[i].wasAgs == '' || data.rows[i].wasAgs == null) { // if not empty string
            //                 count_wasAgs++;
            //             }
            //             if (data.rows[i].swVisits == '' || data.rows[i].swVisits == null) { // if not empty string
            //                 count_swVisits++;
            //             }
            //             if (data.rows[i].mjTF == '' || data.rows[i].mjTF == null) { // if not empty string
            //                 count_mjTF++;
            //             }
            //             if (data.rows[i].alexaTrafRank == '' || data.rows[i].alexaTrafRank == null) { // if not empty string
            //                 count_alexaTrafRank++;
            //             }
            //             if (data.rows[i].markets == '' || data.rows[i].markets == null) { // if not empty string
            //                 count_markets++;
            //             }
            //             if (data.rows[i].liVisitors == '' || data.rows[i].liVisitors == null) { // if not empty string
            //                 count_liVisitors++;
            //             }
            //             if (data.rows[i].checkTrustMessage == '' || data.rows[i].checkTrustMessage == null) { // if not empty string
            //                 count_message++;
            //             }
            //         }
            //         $(this).jqGrid(data.total == count_t ? "hideCol" : "showCol", "checkTrust");
            //         $(this).jqGrid(data.total == count_s ? "hideCol" : "showCol", "spam");
            //         $(this).jqGrid(data.total == count_ags ? "hideCol" : "showCol", "ags");
            //         $(this).jqGrid(data.total == count_cy ? "hideCol" : "showCol", "cy");
            //         $(this).jqGrid(data.total == count_wasAgs ? "hideCol" : "showCol", "wasAgs");
            //         $(this).jqGrid(data.total == count_swVisits ? "hideCol" : "showCol", "swVisits");
            //         $(this).jqGrid(data.total == count_mjTF ? "hideCol" : "showCol", "mjTF");
            //         $(this).jqGrid(data.total == count_alexaTrafRank ? "hideCol" : "showCol", "alexaTrafRank");
            //         $(this).jqGrid(data.total == count_markets ? "hideCol" : "showCol", "markets");
            //         $(this).jqGrid(data.total == count_liVisitors ? "hideCol" : "showCol", "liVisitors");
            //         $(this).jqGrid(data.total == count_message ? "hideCol" : "showCol", "checkTrustMessage");
            //     }
            // }
            /*onSelectRow: function(id, status, e) {
             if (!e || e.which === 1) {
             console.log($(e.target));
             }
             }*/
        },
        formWithoutErrors = 0,
        removeSelectedRows = function (t, route) {
            var selectedRows = t.getGridParam("selarrrow");

            if (selectedRows.length > 0) {
                $.post(route, {ids: selectedRows}, function (r) {
                    if (r.status) {
                        swal("Успех", "Успешно удалено!", "success");

                        $.each(selectedRows, function (k, v) {
                            t.jqGrid('delRowData', v);
                        });
                    } else {
                        swal("Ошибка", "Произошла ошибка при удалении :(", "error");
                    }
                });
            } else {
                swal("Ошибка", "Не выбрано ни одной записи", "error");
            }
        },
        changeLinkStatus = function (linkId, linkPrevStatus, linkStatus, submit) {
            var data = {}, reason, changed = 0;
            data.id = linkId;
            data.prevStatus = linkPrevStatus;
            data.status = linkStatus;

            showLoader(loader);
            $.ajax({
                type: 'POST',
                url: '/ajax/link/check',
                data: data,
                async: false,
                success: function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        $('#link-actions2').modal('show');


                        changed = 1;

                        // swal("", "Статус ссылки устарел и был обновлен. Пожалуйста, попробуйте еще раз", "info");
                        //
                        // table2.jqGrid("setCell", data.id, "status", r.cell);
                        // table1.jqGrid("setCell", data.id, "status", r.cell, '', ' style="display:none"');

                        if (r.reason && r.reason > '') {
                            // table1.jqGrid("setCell", data.id, "reason", r.reason);
                            // table2.jqGrid("setCell", data.id, "reason", r.reason);
                            // table1.trigger('reloadGrid');
                            // table2.trigger('reloadGrid');
                        }

                        // $('#replace-link-request').modal('hide');
                        // console.log(r.cell);
                        // $('#link-actions2').modal('show');
                        // if ($('#link-actions2').length) {
                        //
                        //     $('#link-actions2').modal('show');
                        // }

                        // $('.modal-backdrop').fadeOut();
                        // $('textarea[name=decline_reason_request]').html('');
                        // //$('textarea[name=decline_reason_request]').val('');
                    }
                }
            });
            if (!changed) {
                if (linkStatus > 2 && linkStatus < 7 || parseInt(linkStatus) == 10 || parseInt(linkStatus) == 11 || parseInt(linkStatus) == 12) {

                    reason = $.trim($('textarea[name=decline_reason_request]').val());

                    if (reason > '') {
                        data.reason = reason;
                    } else {
                        $('input[name=linkId]').val(linkId);
                        $('input[name=linkStatus]').val(linkStatus);
                        $('input[name=linkPrevStatus]').val(linkPrevStatus);
                    }

                    if (linkStatus == 6 || linkStatus == 12) {
                        $('#modal-reason').html('отказа');
                    } else {
                        $('#modal-reason').html('запроса на замену');
                    }

                    if (typeof submit === 'undefined') {
                        showLoader(loader);
                        $('#link-history').html('');

                        $.post('/ajax/link/history', {id: linkId}, function (r) {
                            hideLoader(loader);
                            console.log('history');
                            console.log('post 2');
                            console.log(r);
                            console.log('id: ' + linkId);
                            if (r.status) {
                                $('#chat-log').html(r.content);

                                $('[data-link-history]').each(function () {
                                    var element = $(this);

                                    element.slimScroll({
                                        height: (typeof element.attr('data-height') != 'undefined') ? element.attr('data-height') + 'px' : 'auto',
                                        railVisible: false,
                                        alwaysVisible: false
                                    });
                                });
                            }
                            $('#replace-link-request').modal('show');
                        });

                        return 0;
                    }
                } else {
                    if ($('#link-actions').length && $('#link-actions').is(':visible')) {
                        reason = $.trim($('textarea[name=link_actions_decline_reason]').val());

                        if (reason > '') {
                            data.reason = reason;
                        }
                    }
                }

                showLoader(loader);
                $.post('/ajax/link/status', data, function (r) {
                    console.log(r);
                    hideLoader(loader);
                    if (typeof r.done !== 'undefined') {
                        // swal({
                        //     title: "Все готово",
                        //     text: "Вы одобрили все ссылки! С этого момента проект считается закрытым",
                        //     type: "success"
                        // }, function () {
                        //     window.location.href = '/project/allclose';
                        // });

                        $('.approved-text').html('Все готово! <br> Вы одобрили все ссылки! <br> С этого момента проект считается закрытым');
                        $('#link-actions2').modal('show');
                    }

                    if (r.status) {
                        // table2.jqGrid("setCell", data.id, "status", r.cell);
                        // table1.jqGrid("setCell", data.id, "status", r.cell, '', ' style="display:none"');
                        $('.url'+linkId).html(r.cell);
                       // $('.approved-text').html(r.cell);
                        if (r.reason && r.reason > '') {
                            // table1.jqGrid("setCell", data.id, "reason", r.reason);
                            // table2.jqGrid("setCell", data.id, "reason", r.reason);
                            // table1.trigger('reloadGrid');
                            // table2.trigger('reloadGrid');
                            //$('.approved-text').html(r.reason);

                           // $('.url'+linkId).html(r.reason);

                        }


                        //swal("Успех", "Статус изменен!", "success");

                        $('#replace-link-request').modal('hide');
                        if ($('#link-actions').length) {
                            $('#link-actions').modal('hide');

                            $('textarea[name=link_actions_decline_reason]').html('');
                            $('textarea[name=link_actions_decline_reason]').val('');
                        }

                        // $('.modal-backdrop').fadeOut();
                        $('textarea[name=decline_reason_request]').html('');
                        $('textarea[name=decline_reason_request]').val('');
                    } else {
                        swal("Ошибка", "Произошла ошибка при изменении статуса :(", "error");
                    }
                });
            }
        },
        linkActionsModal = function (linkId, projectId) {

            showLoader(loader);

            $.post('/ajax/link/actions', {link: linkId, project: projectId}, function (r) {
                hideLoader(loader);
                console.log(r);
                if (r.status) {
                   // table2.jqGrid("setCell", linkId, "status", r.cell);

                    $('form[name=link-actions]').hide();
                    $('.link-actions-history').html('');
                    if (r.link_form) {
                        $('input[name=actionlinkId]').val(linkId);
                        $('input[name=actionLinkPrevStatus]').val(r.link_status_id);

                        $('#link-action-approve').html(r.link_approve.text);
                        $('#link-action-approve').parent().attr('data-status', r.link_approve.status);

                        $('#link-action-decline').html(r.link_decline.text);
                        $('#link-action-decline').parent().attr('data-status', r.link_decline.status);

                        $('form[name=link-actions]').show();
                    }

                    $('#link-actions-title2').html(r.link_status);

                    $('#link-actions-history').html(r.content2);

                }

                $('#link-actions').modal('show');

                if ($("#link-actions .chat-log .link-actions-history").length && $("#link-actions .chat-log .link-actions-history").children().length > 3) {
                    $('#link-actions .chat-log').slimScroll({
                        height: "393px",
                        start: 'top',
                        railVisible: false,
                        alwaysVisible: false,
                        disableFadeOut: true
                    });
                }
            });

        },
        parseLinks = function (parseUrl, table) {

            var selectedIDs = table.getGridParam("selarrrow");
            var data = {};
            // if (typeof selectedIDs != 'undefined') {
            if (typeof selectedIDs !== 'undefined' && selectedIDs.length > 0) {
                data = {
                    ids: selectedIDs
                };

                parseModal(selectedIDs, parseUrl);

            } else {
                data = {
                    getids: 1
                };

                $.post(parseUrl, data, function (r) {

                    if (r.ids) {
                        parseModal(r.ids, parseUrl);
                    } else {
                        swal("Ошибка", "Произошла ошибка при парсинге :(", "error");
                    }

                });

            }
        },
        parseCheckTrusts = function (parseUrl, table) {

            var selectedIDs = table.getGridParam("selarrrow");

            var str = '';
            $('#checktrust_field input').each(function () {
                if ($(this).is(':checked')) {
                    if (str == '') {
                        str = $(this).attr("name");
                    } else {
                        str += ',' + $(this).attr("name");
                    }
                }
            });

            // if (typeof selectedIDs != 'undefined') {
            if (typeof selectedIDs !== 'undefined' && selectedIDs.length > 0) {
                data = {
                    ids: selectedIDs,
                    str: str
                };


            } else {
                data = {
                    getids: 1,
                    str: str
                };
            }
            showLoader(loader);
            $.post(parseUrl, data, function (r) {
                hideLoader(loader);
                // console.log(r);
                window.location.reload()
                // if (r.ids) {
                //     parseModal(r.ids, parseUrl);
                // } else {
                //     swal("Ошибка", "Произошла ошибка при парсинге :(", "error");
                // }

            });



//        showLoader(loader);
//
//        $.post(parseUrl, data, function (r) {
//            hideLoader(loader);
//
//            if (r.status) {
//                swal("Парсинг завершен", "", "success");
//                window.location.hash = '#post';
//                window.location.reload();
//            } else {
//                swal("Ошибка", "Произошла ошибка при парсинге :(", "error");
//            }
//        });
        },
        parseLinksDash = function (parseUrl, table) {
            var selectedIDs = table.getGridParam("selarrrow");

            var data = {};
            if (selectedIDs.length != 1) {
                swal("Ошибка", "Необходимо выбрать один проект", "error");
                return;
            }

            showLoader(loader);

            $.post(parseUrl + selectedIDs[0], data, function (r) {
                hideLoader(loader);

                if (r.status) {
                    swal("Парсинг завершен", "", "success");
                    window.location.reload();
                } else {
                    swal("Ошибка", "Отсутствуют ссылки для парсинга", "error");
                }
            });

        },
        changeTariffState = function (id, state) {
            var data = {
                id: id,
                state: state
            };

            showLoader(loader);

            $.post('/ajax/tariff/status', data, function (r) {
                hideLoader(loader);

                if (r.status) {
                    swal("Сохранено", "Статус успешно изменен!", "success");

                    $.jgrid.gridUnload('table-1');
                    $('#table-1').jqGrid(jgridSettingsCopy);
                } else {
                    swal("Ошибка", "Произошла ошибка", "error");
                }
            });
        },
        projectAction = function (e, type, id) {
            e.preventDefault();

            var data = {
                id: id,
                action: type,
                comment: $('textarea[name=comment]').val()
            },
                    instance = $('form[name=project-accept]').parsley();

            if (instance.isValid()) {
                showLoader(loader);
                $.post('/ajax/project/action', data, function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        swal({
                            title: "Сохранено",
                            type: "success",
                            showCancelButton: false,
                            closeOnConfirm: false,
                            showLoaderOnConfirm: true
                        }, function () {
                            setTimeout(function () {
                                window.location.reload();
                            }, 500);
                        });
                    } else {
                        swal("Ошибка", "Произошла ошибка :(", "error");
                    }
                });
            } else {
                swal("Ошибка", "Убедитесь в правильности заполненных данных", "error");
            }
        },
        clientFunds = function (uid, type) {
            $('.client-money-modals input[name=uid]').val(uid);
            $('.client-money-modals input[name=type]').val(type);
            $('.client-money-modals input[name=amount]').val('');

            if (type == "refund") {
                showLoader(loader);

                $.post('/ajax/client_refund_options/' + uid, function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        $('#refund-currency').html('');
                        $('select[name=payment]').html(r.options);
                        $('select[name=payment]').trigger('chosen:updated');

                        $('#c-funds-refund').modal('show');
                    } else {
                        swal("Ошибка", "Отсутствуют операции для возврата", "error");
                    }
                });
            } else {
                $('#c-funds-replenish').modal('show');
            }
        },
        projectVerification = function (pid) {

            if (pid > '') {
                showLoader(loader);

                $.post('/ajax/request_project_verification/' + pid, function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        $('#request-project-verification').modal('show');
                        $('.req-project-button').attr('disabled', 'disabled')
                    } else {
                        swal("Ошибка", "Отсутствуют операции для возврата", "error");
                    }
                });
            } else {
                swal("Ошибка", "Отсутствуют ID проекта", "error");
            }
        },
        posterRequest = function (id) {
            var data = {
                id: id,
                comment: $('textarea[name=comment]').val()
            };

            showLoader(loader);

            $.post('/ajax/poster_request', data, function (r) {
                hideLoader(loader);

                if (r.status) {
                    swal("Отправлено", "", "success");

                    window.location.reload();
                } else {
                    swal("Ошибка", "Произошла ошибка :(", "error");
                }
            });
        },
        assignPoster = function (pid, uid) {
            var form = $('form[name=offer-poster' + uid + ']'),
                    instance = form.parsley();

            var data = {
                pid: pid,
                uid: uid
            };
            form.find('input, textarea').serializeArray().map(function (x) {
                data[x.name] = x.value;
            });

            showLoader(loader);

            if (instance.isValid()) {
                showLoader(loader);

                $.post('/ajax/poster_assign', data, function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        swal("Запрос отправлен", "", "success");
                        //table1.jqGrid('delRowData', uid);
                        $('#poster' + uid).modal('hide');
                        $('.modal-backdrop').fadeOut();
                    } else {
                        swal("Ошибка", "Произошла ошибка :(", "error");
                    }
                });
            } else {
                swal("Ошибка", "Убедитесь в правильности заполненных данных", "error");
            }
        },
        assignPosterAddLink = function (pid, uid) {
            var form = $('form[name=change-count-link-poster' + uid + ']'),
                    instance = form.parsley();

            var data = {
                pid: pid,
                uid: uid
            };
            form.find('input, textarea').serializeArray().map(function (x) {
                data[x.name] = x.value;
            });

            showLoader(loader);

            if (instance.isValid()) {
                showLoader(loader);

                $.post('/ajax/change_count_links_poster', data, function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        swal("Сохранено", "", "success");
                        //table1.jqGrid('delRowData', uid);
                        $('#poster' + uid).modal('hide');
                        $('.modal-backdrop').fadeOut();
                        window.location.reload();
                    } else {
                        swal("Ошибка", "Произошла ошибка :(", "error");
                    }
                });
            } else {
                hideLoader(loader);
                swal("Ошибка", "Убедитесь в правильности заполненных данных", "error");
            }
        },
        posterActions = function (pid, action) {
            var data = {
                pid: pid,
                action: action
            };

            showLoader(loader);

            $.post('/ajax/poster_action', data, function (r) {
                hideLoader(loader);

                if (r.status) {
                    swal("Успешно", "", "success");
                    table1.jqGrid('delRowData', pid);

                    if (data.action == 'accept') {
                        window.location.href = '/poster/my_projects/active';
                    } else {
                        window.location.href = '/poster/projects/assigned';
                    }
                } else {
                    swal("Ошибка", "Произошла ошибка :(", "error");
                }
            });
        },
        filterNotifications = function () {
            var filterBy = {
                project: $('input[name=projects]').is(':checked'),
                system: $('input[name=system]').is(':checked'),
                timestamp: $('select[name=period]').val(),
                pastMonth: ($('select[name=period] option:selected').attr('data-past') > '' ? $('select[name=period] option:selected').attr('data-past') : false)
            };

            $('form[name=notify] .media-box').each(function (k, el) {
                $(el).hide();

                if ((filterBy.timestamp == 'all' || (!filterBy.pastMonth ? parseInt(filterBy.timestamp) <= parseInt($(el).attr('data-timestamp')) : parseInt(filterBy.timestamp) <= parseInt($(el).attr('data-timestamp')) && parseInt(filterBy.pastMonth) > parseInt($(el).attr('data-timestamp')))) && ($(el).attr('data-system') == filterBy.system || $(el).attr('data-project') == filterBy.project) && (filterBy.system != 0 || filterBy.project != 0))
                    $(el).show();
            });
        },
        purgeClient = function (uid, sure) {
            if (!sure) {
                swal({
                    title: "Вы уверены?",
                    text: "Пользователь и его проекты будут невозвратно удалены!",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Да",
                    cancelButtonText: "Нет",
                    closeOnConfirm: false,
                    closeOnCancel: false
                }, function (isConfirm) {
                    if (isConfirm) {
                        purgeClient(uid, 1);
                    } else {
                        swal("Отменено", "", "error");
                    }
                });

                return;
            }

            showLoader(loader);

            $.post('/ajax/client/remove', {id: uid}, function (r) {
                hideLoader(loader);

                if (r.status) {
                    swal("Клиент удален", "", "success");

                    window.location.href = '/clients/trash';
                } else {
                    swal("Ошибка", "Произошла ошибка :(", "error");
                }
            });
        },
        banPoster = function (uid, sure) {
            if (!sure) {
                swal({
                    title: "Вы уверены?",
                    text: "Постер будет забанен!",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Да",
                    cancelButtonText: "Нет",
                    closeOnConfirm: false,
                    closeOnCancel: false
                }, function (isConfirm) {
                    if (isConfirm) {
                        banPoster(uid, 1);
                    } else {
                        swal("Отменено", "", "error");
                    }
                });

                return;
            }

            showLoader(loader);

            $.post('/ajax/poster/ban', {id: uid}, function (r) {
                hideLoader(loader);

                if (r.status) {
                    swal("Постер забанен", "", "success");

                    window.location.href = '/posters/banned';
                } else {
                    swal("Ошибка", "Произошла ошибка :(", "error");
                }
            });
        },
        restorePoster = function (uid) {
            showLoader(loader);

            $.post('/ajax/poster/restore', {id: uid}, function (r) {
                hideLoader(loader);

                if (r.status) {
                    swal("Постер восстановлен!", "", "success");

                    window.location.reload();
                } else {
                    swal("Ошибка", "Произошла ошибка :(", "error");
                }
            });
        },
        restoreUser = function (uid) {
            showLoader(loader);

            $.post('/ajax/poster/restore', {id: uid}, function (r) {
                hideLoader(loader);

                if (r.status) {
                    swal("Пользователь восстановлен!", "", "success");

                    window.location.reload();
                } else {
                    swal("Ошибка", "Произошла ошибка :(", "error");
                }
            });
        },
        paginate = function (page, self) {
            $('.pagination li').removeClass('active');
            self.parent().addClass('active');
            var paginate = $('.paginated');

            if (paginate.length) {
                paginate.hide();

                $('.p' + page).fadeIn();
            }
        },
        applyUserFilter = function (id, self) {
            showLoader(loader);
            $('.nav-tabs li').removeClass('active');
            self.parent().addClass('active');

            $.post('/ajax/filter/get', {id: id}, function (r) {
                hideLoader(loader);

                if (r.status) {
                    f.rules = [];
                    $.each(r.filter, function (field, v) {
                        if (v > '') {
                            if (v == 'on')
                                $('[name=' + field + ']').attr('checked', 'checked');
                            else if (v == 'off')
                                $('[name=' + field + ']').removeAttr('checked');
                            else
                                $('[name=' + field + ']').val(v);

                            filterBy($('[name=' + field + ']'));
                        } else {
                            $('[name=' + field + ']').val('');
                        }
                    });

                    $.extend(table1[0].p.postData, {filters: JSON.stringify(f)});
                    table1.trigger("reloadGrid", [{page: 1}]);
                    $('.chosen-select').trigger("chosen:updated");
                    $('#rm-filter').show();
                } else {
                    swal("Ошибка", "Произошла ошибка :(", "error");
                }
            });
        },
        removeUserFilter = function () {
            var active = $('.user-filter.active');

            if (active.length > 0) {
                showLoader(loader);

                $.post('/ajax/filter/remove', {id: active.attr('data-id'), uid: active.attr('data-uid')}, function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        swal("Фильтр удален", "", "success");

                        window.location.reload();
                    } else {
                        swal("Ошибка", "Произошла ошибка :(", "error");
                    }
                });
            } else {
                swal("Ошибка", "Выберите фильтр", "error");
            }
        },
        convertDate = function (date, rule) {
            // Check if date format like dd.mm.yyyy
            // If so, try convert to date obj
            // and return timestamp for compare
            var timestamp = 0,
                    time = 'T00:00';

            if (typeof rule !== 'undefined' && rule == 'le') {
                time = 'T23:59';
            }

            if (/\d{2}.\d{2}.\d{4}/.test(date)) {
                // Compose to date format
                date = date.split('.');
                date = new Date(date[2] + '-' + date[1] + '-' + date[0] + time);
                if (Object.prototype.toString.call(date) === "[object Date]") {
                    if (!isNaN(date.getTime())) {
                        timestamp = date.getTime() / 1000;
                    }
                }
            }

            return (timestamp) ? timestamp.toString() : '';
        },
        iterableRows = 0,
        parserConfig = {
            delimiter: "\t", // auto-detect
            newline: "\n", // auto-detect
            header: 0,
            dynamicTyping: false,
            preview: 0,
            encoding: "UTF-8",
            worker: false,
            comments: false,
            skipEmptyLines: true,
            download: false,
            complete: function (results, file) {
                var rows = results.data.length;
                console.log(rows);
                if (rows > 0) {
                    var DOMrows = $('#import-table').html();
                    for (var i = 0; i < results.data.length; i++) {

                        if (results.data[i].length > 2) {
                            if ($.trim(results.data[i][0]) > '' || $.trim(results.data[i][1]) > '' || $.trim(results.data[i][2]) > '' || $.trim(results.data[i][3])) {
                                DOMrows += '<tr id="i' + iterableRows + '"><td><input name="urlHolder[]" type="text" class="form-control" value="' + results.data[i][0] + '" required></td><td><input name="anchor[]" type="text" class="form-control" value="' + results.data[i][1] + '"></td><td><input name="url[]"  type="text" class="form-control" value="' + results.data[i][2] + '" required></td><td><input name="comment[]" type="text" class="form-control" value="' + (results.data[i][3] ? results.data[i][3] : '') + '"></td><td><button type="button" class="mb-sm btn btn-danger" onclick="removeImportRow(\'#i' + iterableRows + '\');">Удалить</button></td></tr>';

                                iterableRows++;
                            }
                        }
                    }

                    $('#import-table').html(DOMrows);
                    swal("Успех", 'Импорт завершен', "success");
                } else {
                    swal("Ошибка", 'Нечего импортировать', "error");
                }

                hideLoader(loader);
            },
            error: function (error, file) {
                swal("Ошибка", error, "error");
            }
        },
        parserConfigForPreliminary = {
            delimiter: "\t", // auto-detect
            newline: "\n", // auto-detect
            header: 0,
            dynamicTyping: false,
            preview: 0,
            encoding: "UTF-8",
            worker: false,
            comments: false,
            skipEmptyLines: true,
            download: false,
            complete: function (results, file) {
                var rows = results.data.length;
                console.log(rows);
                if (rows > 0) {
                    var DOMrows = $('#import-table').html();
                    for (var i = 0; i < results.data.length; i++) {
                        if (results.data[i].length >= 1) {
                            if ($.trim(results.data[i][0]) > '') {

                                DOMrows += '<tr id="i' + iterableRows + '"><td><input name="urlHolder[]" type="text" class="form-control" value="' + results.data[i][0] + '" required></td><td><input name="anchor[]" type="text" class="form-control" disabled></td><td><input name="url[]"  type="text" class="form-control" disabled></td><td><input name="comment[]" type="text" class="form-control" disabled></td><td><button type="button" class="mb-sm btn btn-danger" onclick="removeImportRow(\'#i' + iterableRows + '\');">Удалить</button></td></tr>';

                                iterableRows++;

                            }
                        }
                    }

                    $('#import-table').html(DOMrows);
                    swal("Успех", 'Импорт завершен', "success");
                } else {
                    swal("Ошибка", 'Нечего импортировать', "error");
                }

                hideLoader(loader);
            },
            error: function (error, file) {
                swal("Ошибка", error, "error");
            }
        },
        parserConfigForTargetUrl = {
            delimiter: "\t", // auto-detect
            newline: "\n", // auto-detect
            header: 0,
            dynamicTyping: false,
            preview: 0,
            encoding: "UTF-8",
            worker: false,
            comments: false,
            skipEmptyLines: true,
            download: false,
            complete: function (results, file) {
                var rows = results.data.length;
                console.log(rows);
                if (rows > 0) {
                //    var DOMrows = $('tbody.target-url-table').html();
                    var DOMrows = '';
                    for (var i = 0; i < results.data.length; i++) {
                        if (results.data[i].length >= 1) {
                            if ($.trim(results.data[i][0]) > '') {

                                var anchor = results.data[i][1] === undefined ?'':results.data[i][1];
                                var dist = results.data[i][2] === undefined?'':results.data[i][2];
                                var text = results.data[i][3] === undefined?'':results.data[i][3];

                                DOMrows += '<tr id="i' + iterableRows + '"><td><input name="target_url[url_target][]" type="text" class="form-control" value="'
                                    + results.data[i][0] + '" required></td><td><input name="target_url[anchor_target][]" type="text" class="form-control" value="'
                                    + anchor + '"></td><td><input name="target_url[distribution_target][]"  type="number" class="form-control target-distribution-count" value="'
                                    + dist + '" ></td><td><input name="target_url[text_target][]" type="text" class="form-control" value="'
                                    + text + '"></td>'
                                    +'<td><button type="button" class="btn btn-labeled btn-green btn-xs btn-icon addTargetUrlRow">\n' +
                                    '                            <img src="/images/plus.svg" alt="">\n' +
                                    '                        </button>\n' +
                                    '                        <button type="button" class="btn btn-gray btn-xs btn-icon removeTargetUrlRow">\n' +
                                    '                            <img src="/images/minus.svg" alt="">\n' +
                                    '                        </button></td></tr>';

                                iterableRows++;

                            }
                        }
                    }

                    $('tbody.target-url-table').append(DOMrows);
                    $('button.close').click();
                    targetDistributionCount();
                    swal("Успех", 'Импорт завершен', "success");
                } else {
                    swal("Ошибка", 'Нечего импортировать', "error");
                }

                hideLoader(loader);
            },
            error: function (error, file) {
                swal("Ошибка", error, "error");
            }
        },
        parserConfigForTargetUrl2 = {
            delimiter: "\t", // auto-detect
            newline: "\n", // auto-detect
            header: 0,
            dynamicTyping: false,
            preview: 0,
            encoding: "UTF-8",
            worker: false,
            comments: false,
            skipEmptyLines: true,
            download: false,
            complete: function (results, file) {
                var rows = results.data.length;
                console.log(rows);
                if (rows > 0) {
                    var DOMrows = $('tbody.target-url-table').html();
                    for (var i = 0; i < results.data.length; i++) {
                        if (results.data[i].length >= 1) {
                            if ($.trim(results.data[i][0]) > '') {
                                var anchor = results.data[i][1] === undefined ?'':results.data[i][1];
                                var dist = results.data[i][2] === undefined?'':results.data[i][2];
                                var text = results.data[i][3] === undefined?'':results.data[i][3];
                                var m_count_target = results.data[i][4] === undefined?'':results.data[i][4];
                                var p_count_target = results.data[i][5] === undefined?'':results.data[i][5];

                                DOMrows += '<tr id="i' + iterableRows + '"><td><textarea name="url_target" class="form-control techdoc-editable" required>'
                                    + results.data[i][0] + '</textarea></td><td><textarea name="anchor_target" type="text" class="form-control techdoc-editable">'
                                    + anchor + '</textarea></td><td><input name="distribution_target"  type="text" class="form-control techdoc-editable" value="'
                                    + dist + '" ></td><td><textarea name="text_target" class="form-control techdoc-editable" required>'
                                    + text + '</textarea></td><td></td><td></td>'
                                    +'<td><button type="button" class="mb-sm btn btn-danger removeTargetUrlRow"><i class="fa fa-minus"></i></button></td></tr>';

                                iterableRows++;

                            }
                        }
                    }

                    $('tbody.target-url-table').html(DOMrows);
                    $('button.close').click();
                    swal("Успех", 'Импорт завершен', "success");
                } else {
                    swal("Ошибка", 'Нечего импортировать', "error");
                }

                hideLoader(loader);
            },
            error: function (error, file) {
                swal("Ошибка", error, "error");
            }
        },
        graphOptions = {
            series: {
                lines: {
                    show: true,
                    lineWidth: 0,
                    fill: 0.01
                },
                points: {
                    show: true,
                    radius: 4
                },
                splines: {
                    show: true,
                    tension: 0.4,
                    lineWidth: 1,
                    fill: 0.3
                }
            },
            grid: {
                borderColor: '#eee',
                borderWidth: 1,
                hoverable: true,
                backgroundColor: '#fcfcfc'
            },
            tooltip: true,
            tooltipOpts: {
                content: function (label, x, y) {
                    return x + ' : ' + y;
                }
            },
            xaxis: {
                tickColor: '#eee',
                mode: 'categories'
            },
            yaxis: {
                // position: 'right' or 'left'
                tickColor: '#eee',
                min: 0,
                tickFormatter: function (number) {
                    if (number == 0)
                        return '';
                    else if (isInt(number))
                        return number;
                    else
                        return '';
                }
            },
            shadowSize: 0
        },
        isInt = function (n) {
            return n % 1 === 0;
        },
        parseFile = function (preliminary) {
            parserConfig.delimiter = "";

            if ($('#import-file').length > 0) {
                if ($('#import-file')[0].files.length > 0) {
                    showLoader(loader);
                    if (preliminary) {
                        Papa.parse($('#import-file')[0].files[0], parserConfigForPreliminary);
                    } else {
                        Papa.parse($('#import-file')[0].files[0], parserConfig);
                    }
                } else {
                    swal("Ошибка", 'Файл не выбран', "error");
                }
            }

            if ($('#import-csv').length > 0) {
                if ($('#import-csv')[0].files.length > 0) {
                    showLoader(loader);

                    Papa.parse($('#import-csv')[0].files[0], parserConfig);
                }
            }
        },
        parseString = function (preliminary) {
            parserConfig.delimiter = "\t";
            var parseString = $.trim($('#import-ta').val());

            if (preliminary === 'target2'){
                parseString = $.trim($('#import-ta-target-url').val());
            }
            if (parseString > '') {
                showLoader(loader);
                if (preliminary === 'target2') {
                    Papa.parse(parseString, parserConfigForTargetUrl2);
                } else if (preliminary === 'target') {
                    Papa.parse(parseString, parserConfigForTargetUrl);
                } else if(preliminary) {
                    Papa.parse(parseString, parserConfigForPreliminary);
                } else {
                    Papa.parse(parseString, parserConfig);
                }
            } else {
                swal("Ошибка", 'Поле для ввода не содержит информации для парсера', "error");
            }
        },
        removeImportRow = function (id) {
            $(id).remove();
        },
        addImportRow = function (preliminary) {

            if (preliminary) {
                var row = '<tr id="i' + iterableRows + '"><td><input name="urlHolder[]" type="text" class="form-control" value="" required></td><td><input name="anchor[]" type="text" class="form-control" value="" disabled></td><td><input name="url[]"  type="text" class="form-control" value="" disabled></td><td><input name="comment[]" type="text" class="form-control" value="" disabled></td><td><button type="button" class="mb-sm btn btn-danger" onclick="removeImportRow(\'#i' + iterableRows + '\');">Удалить</button></td></tr>';
            } else {
                var row = '<tr id="i' + iterableRows + '"><td><input name="urlHolder[]" type="text" class="form-control" value="" required></td><td><input name="anchor[]" type="text" class="form-control" value=""></td><td><input name="url[]"  type="text" class="form-control" value="" required></td><td><input name="comment[]" type="text" class="form-control" value=""></td><td><button type="button" class="mb-sm btn btn-danger" onclick="removeImportRow(\'#i' + iterableRows + '\');">Удалить</button></td></tr>';

            }
            if (iterableRows > 0 && $.trim($('#import-table').html()) > '') {
                $(row).insertAfter('#import-table tr:last');
            } else {
                $('#import-table').html(row);
            }

            iterableRows++;
        },
       clearImportedRows = function () {
            iterableRows = 0;
            $('#import-table tr').remove();
        },
        posterDeclineActions = function (id, action) {
            var data = {
                id: id,
                action: action
            };

            if (action == 'decline') {
                $('#project-decline input[name=id]').val(id);
                $('#project-decline').modal('show');
                return;
            }

            showLoader(loader);

            $.post('/ajax/poster/unassign', data, function (r) {
                hideLoader(loader);

                if (r.status) {
                    swal("Успешно", "", "success");
                    window.location.href = r.url;
                } else {
                    swal("Ошибка", "Произошла ошибка, возможно постер уже снят или не назначен на этот проект", "error");
                }
            });
        },
        createCookie = function (name, value, days) {
            var expires;
            if (days) {
                var date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toGMTString();
            } else {
                expires = "";
            }
            document.cookie = name + "=" + value + expires + "; path=/";
        },
        getCookie = function (c_name) {
            if (document.cookie.length > 0) {
                c_start = document.cookie.indexOf(c_name + "=");
                if (c_start != -1) {
                    c_start = c_start + c_name.length + 1;
                    c_end = document.cookie.indexOf(";", c_start);
                    if (c_end == -1) {
                        c_end = document.cookie.length;
                    }
                    return unescape(document.cookie.substring(c_start, c_end));
                }
            }
            return "";
        },
        placeCaretAtEnd = function (el) {
            el.focus();
            if (typeof window.getSelection != "undefined"
                    && typeof document.createRange != "undefined") {
                var range = document.createRange();
                range.selectNodeContents(el);
                range.collapse(false);
                var sel = window.getSelection();
                sel.removeAllRanges();
                sel.addRange(range);
            } else if (typeof document.body.createTextRange != "undefined") {
                var textRange = document.body.createTextRange();
                textRange.moveToElementText(el);
                textRange.collapse(false);
                textRange.select();
            }
        },
        checkUrl = function (url, link) {
            var request = new XMLHttpRequest;
            request.open('GET', 'http://cors.io/?u=' + url, true);
            request.send();
            request.onreadystatechange = function () {
                if (request.readyState == 4) {
                    if (request.status != 200) {
                        link.replaceWith(function () {
                            return $("<span>" + $(this).html() + "</span>");
                        });
                    }
                }
            }
        },
        filterPosters = function (element, table) {
            if (typeof table === 'undefined') {
                table = 'table2';
            }

            if (typeof window[table + 'Filter'] === 'undefined') {
                window[table + 'Filter'] = {groupOp: "AND", rules: []};
            }

            var inObj = false,
                    f = window[table + 'Filter'];

            $.each(f.rules, function (i, rule) {
                if (element.attr('data-rule')) { // from <-> to interval
                    if (rule.field == element.attr('data-col') && rule.op == element.attr('data-rule')) {
                        if (typeof element.data('DateTimePicker') == 'undefined')
                            f.rules[i].data = element.val();
                        else
                            f.rules[i].data = convertDate(element.val());

                        inObj = true;
                    }
                } else { // contain filter
                    if (rule.field == element.attr('data-col')) {
                        f.rules[i].data = element.val();
                        inObj = true;
                    }
                }
            });
            if (!inObj)
                f.rules.push({
                    field: element.attr('data-col'),
                    op: element.attr('data-rule') ? element.attr('data-rule') : "cn",
                    data: typeof element.data('DateTimePicker') != 'undefined' ? convertDate(element.val()) : element.val()
                });

            window[table][0].p.search = f.rules.length > 0;
            $.extend(window[table][0].p.postData, {filters: JSON.stringify(f)});
            window[table].trigger("reloadGrid", [{page: 1}]);
        },
        linkOperation = function (operation, table, trigger) {
            var selectedIDs = table.getGridParam("selarrrow"),
                    rowKey = table.getGridParam("selrow"),
                    data = {};

            data.operation = operation;

            if (!rowKey) {
                swal("Ошибка", "Не выбрано ни одной записи", "error");
                return;
            } else {
                data.ids = selectedIDs;
            }

            if (data.operation > '') {
                if (data.operation == 'replace') {
                    $('#replace-link-operation').modal('show');
                    $('input[name=trigger]').val(trigger);

                    data.reason = $.trim($('textarea[name=decline_reason_operation]').val());
                    if (data.reason == '')
                        return;
                }

                showLoader(loader);

                $.post('/ajax/link/operation', data, function (r) {
                    hideLoader(loader);

                    if (r.status) {
                        swal("Готово", "", "success");

                        //window.location.hash = '#post';
                        window.location.reload();
                    } else {
                        if (typeof r.done !== 'undefined') {
                            swal({
                                title: "Все готово",
                                text: "Вы одобрили все ссылки! С этого момента проект считается закрытым",
                                type: "success"
                            }, function () {
                                window.location.href = '/project/all';
                            });
                        } else {
                            if (typeof r.error !== 'undefined') {
                                swal("Ошибка", r.error, "error");
                            } else {
                                swal("Ошибка", "Произошла ошибка :(", "error");
                            }
                        }
                    }
                });
            } else {
                swal("Ошибка", "Выберите операцию", "error");
            }
        },
        linkOperationNew = function (operation, table, trigger) {

        var selectedIDs = table.find("input[name='mass-action']:checked");


            data = {};

        data.operation = operation;

        if (!selectedIDs.length) {
            swal("Ошибка", "Не выбрано ни одной записи", "error");
            return;
        } else {
            var ids = [];
            selectedIDs.each(function( index ) {
                ids.push($( this ).data('id'))
            });
            data.ids = ids;
        }
//console.log(data);
        if (data.operation > '') {
            if (data.operation == 'replace') {
                $('#replace-link-operation').modal('show');
                $('input[name=trigger]').val(trigger);

                data.reason = $.trim($('textarea[name=decline_reason_operation]').val());
                if (data.reason == '')
                    return;
            }

            showLoader(loader);

            $.post('/ajax/link/operation', data, function (r) {
                hideLoader(loader);

                if (r.status) {
                    swal("Готово", "", "success");

                    //window.location.hash = '#post';
                    window.location.reload();
                } else {
                    if (typeof r.done !== 'undefined') {
                        swal({
                            title: "Все готово",
                            text: "Вы одобрили все ссылки! С этого момента проект считается закрытым",
                            type: "success"
                        }, function () {
                            window.location.href = '/project/all';
                        });
                    } else {
                        if (typeof r.error !== 'undefined') {
                            swal("Ошибка", r.error, "error");
                        } else {
                            swal("Ошибка", "Произошла ошибка :(", "error");
                        }
                    }
                }
            });
        } else {
            swal("Ошибка", "Выберите операцию", "error");
        }
    },
        removeLink = function (id) {
            showLoader(loader);

            $.post('/ajax/link/remove', {id: id}, function (r) {
                hideLoader(loader);

                if (r.status) {
                    $.notify('Ссылка удалена', {"status": "success"});

                    table2.jqGrid('delRowData', id);
                } else {
                    $.notify('Произошла ошибка при удалении', {"status": "danger"});
                }
            });
        },
        editLink = function (id) {
            showLoader(loader);

            $.post('/ajax/link/edit_popup', {id: id}, function (r) {
                hideLoader(loader);
                if (r.status) {
                    $('#edit-link').html(r.content);

                    $('[data-link-history]').each(function () {
                        var element = $(this);

                        element.slimScroll({
                            height: (typeof element.attr('data-height') != 'undefined') ? element.attr('data-height') + 'px' : 'auto',
                            railVisible: false,
                            alwaysVisible: false
                        });

                        element.show();
                    });

                    $('#edit-link').modal('show');
                } else {
                    $.notify('Ссылка недоступна для редактирования', {"status": "danger"});
                }
            });
        },
        removeTariff = function (id) {
            showLoader(loader);

            $.post('/ajax/tariff/remove', {id: id}, function (r) {
                hideLoader(loader);

                if (r.status) {
                    $.notify('Тариф удален', {"status": "success"});

                    //table1.jqGrid('delRowData', id);
                    $.jgrid.gridUnload('table-1');
                    $('#table-1').jqGrid(jgridSettingsCopy);
                } else {
                    $.notify('Произошла ошибка при удалении', {"status": "danger"});
                }
            });
        },
        parseDateString = function (date, iso, returnDay) {
            var y, m, d;
            y = date.getFullYear();
            m = date.getMonth() + 1;
            m = m < 10 ? '0' + m : m;
            d = date.getDate();
            d = d < 10 ? '0' + d : d;

            if (iso) {
                if (typeof returnDay === 'undefined') {
                    return y + '-' + m + '-' + d;
                } else {
                    return y + '-' + m;
                }
            } else {
                if (typeof returnDay === 'undefined') {
                    return d + '.' + m + '.' + y;
                } else {
                    return d + '.' + m;
                }
            }
        },
        changeDateMonth = function (date, direction) {
            var n = 1, dateCopy = new Date(date.getTime());

            if (direction != 'next') {
                n = -1;
            }

            dateCopy.setMonth(dateCopy.getMonth() + n);
            return dateCopy;
        },
        createPosterPayment = function (poster, amount) {
            showLoader(loader);

            $.post('/ajax/poster/custom_withdraw', {poster: poster, amount: amount}, function (r) {
                hideLoader(loader);

                if (r.status) {
                    swal("Заявка на оплату успешно сформирована", "", "success");
                    table1.jqGrid("setCell", poster, "toPay", '0$');
                } else {
                    if (r.lowAmount) {
                        swal("Ошибка", "Запрошенное количество денег на вывод слишком мало — попробуйте ввести сумму больше", "error");
                    } else if (r.emptyCredentials) {
                        swal("Ошибка", r.emptyCredentialsError, "error");
                    } else {
                        swal("Ошибка", "", "error");
                    }
                }
            });
        },
        declinePosterWithdraw = function (id) {
            showLoader(loader);

            $.post('/ajax/poster/money_back', {id: id}, function (r) {
                hideLoader(loader);
                console.log(r);
                if (r.status) {
                    table1.jqGrid("setCell", id, "to_pay", 'Отклонен');
                    table1.jqGrid("setCell", id, "action", r.details);

                    swal("Успешно", "", "success");
                } else {
                    swal("Ошибка", "Произошла ошибка", "error");
                }

            });
        };

/**
 * Show fullpage loader
 *
 * @param loader
 */
var showLoader = function (loader) {
    spinner.spin(loader);
    loader.style.display = "block";
};

/**
 * Hide fullpage loader
 *
 * @param loader
 */
var hideLoader = function (loader) {
    spinner.stop(loader);
    loader.style.display = "none";
};


/**
 * Generate modal for parse link
 *
 * @param selectedIDs
 */
var parseModal = function (selectedIDs, parseUrl) {

    var selectedCount = selectedIDs.length;

    $('#parse .parse-all-links').text(selectedCount);

    $('#parse').modal('show');

    $.each(selectedIDs, function (i, val) {

        var data = {};
        var ids = {0: val}

        data = {
            ids: ids
        };

        $.ajax({
            url: parseUrl,
            type: 'POST',
            data: data,
            error: function (r) {
                console.error(r);
                swal("Ошибка", "Произошла ошибка при парсинге :(", "error");
            },
            success: function (r) {
                console.log(r);
                if (r.status) {

                    var curent = parseInt($('#parse .parse-fin-links').text());

                    curent = ++curent;

                    $('#parse .parse-fin-links').text(curent);

                    // Расчитаем %
                    var percen = (100 * curent) / selectedCount;

                    $('#parse .progress-bar-striped').css('width', percen + '%');

                    if (curent >= selectedCount) {

                        $('#parse').modal('hide');
                        swal("Парсинг завершен", "", "success");
                        window.location.hash = '#post';
                        window.location.reload();

                    }

                } else {
                    console.error(r);
                    swal("Ошибка", "Произошла ошибка при парсинге :(", "error");
                }
            }

        });


    });// each



};

// setInterval(function () {
//     tableResize()
// }, 1500);

/**
 *
 */
$(document).on('change', '.count-link-prj', function () {
    data = {
        count: this.value,
        id: $(this).data('prj-id'),
        param: ($(this).attr('name') == 'countIn') ? 'countIn' : 'countOut'
    };
    $.post('/ajax/save_count_link', data,
            function (r) {
                if (r.status) {
                    swal("Сохранено", 'Параметр сохранен', "success");
                } else {
                    swal("Ошибка", "Параметр не сохранился :(", "error");
                }
            }
    )
});

$('input[name=count-url-in-data]').datetimepicker({
    locale: 'ru',
    format: 'YYYY-MM-DD'
});

$("input[name=count-url-in-data]").on("dp.change", function (e) {
    data = {
        count: $(this).val(),
        id: $(this).data('prj-id'),
        param: 'data'
    };
    $.post('/ajax/save_count_link', data,
        function (r) {
            if (r.status) {
                swal("Сохранено", 'Параметр сохранен', "success");
                window.location.reload();
            } else {
                swal("Ошибка", "Параметр не сохранился :(", "error");
            }
        }
    )
});

/**
 * изменение статуса для предварительного одобрения веток
 */
$("input[name=preliminaryApprowed]").on("click", function () {
    data = {
        count: $(this).is(':checked') ? 1 : 0,
        id: $(this).data('prj-id'),
        param: 'preliminary_approval_branches'
    };
    $.post('/ajax/save_count_link', data,
            function (r) {
                if (r.status) {
                    swal("Сохранено", 'Параметр сохранен', "success");
                    window.location.reload();
                } else {
                    swal("Ошибка", "Параметр не сохранился :(", "error");
                }
            }
    )
});

/**
 * Search project for relation
 */
$("#search-prj").keyup(function () {
    var str = $(this).val()
    var id = $(this).data("prj-id")
    if ($.isNumeric(str)) {
        var data = {
            id_prj: id,
            s: str
        }
    } else {
        if (str.length > 3) {
            var data = {
                id_prj: id,
                s: str
            }
        }
    }
    // $(".input-search ul").empty();
    if (data != undefined) {
        $.post('/ajax/search_relation_prj', data,
                function (r) {
                    $(".input-search ul").empty();
                    if (r.status) {
                        var result = '<li class="row-coluumn title"><div class="id">ID</div><div class="title">Название проекта</div><div class="webSite">URL проекта</div><div class="relation-button"></div></li>';
                        if ($.isArray(r.project)) {
                            var temp = '';
                            $.each(r.project, function (index, value) {
                                temp += '<li class="row-coluumn"><div class="id">' + value.id + '</div><div class="title">' + value.title + '</div><div class="webSite">' + value.webSite + '</div>';
                                temp += '<div class="relation-button"><div class="relation_prj btn" data-id="' + id + '" data-relation-id="' + value.id + '" >Связать</div></div></li>';
                            });
                            result += temp;
                        } else
                        {
                            // result += '<li class="row-coluumn"><div class="id">' + r.project.id + '</div><div class="title">' + r.project.title + '</div><div class="webSite">' + r.project.webSite + '</div>';
                            // result += '<div class="relation-button"><div class="relation_prj btn" data-id="' + id + '" data-relation-id="' + r.project.id + '" >Связать</div></div></li>';
                        }
                        $(".input-search").css('display', 'block');
                        $(".input-search ul").append(result);
                    }
                })
    } else {
        $(".input-search").css('display', 'none')
    }

})

/**
 * relation project
 */
$(document).on('click', '.relation_prj', function () {
    data = {
        id: $(this).data('id'),
        id_relation: $(this).data('relation-id')
    };
    $.post('/ajax/save_relation_prj', data,
            function (r) {
                if (r.status) {
                    console.log('relation add');
                    window.location.reload();
                }
            }
    )
});
/**
 * Delete relation project
 */
$(document).on('click', '.delete_relation_prj', function () {
    var tr = $(this).closest('tr');
    data = {
        id: $(this).data('id'),
        id_relation: $(this).data('relation-id')
    };
    $.post('/ajax/delete_relation_prj', data,
            function (r) {
                if (r.status) {
                    tr.empty();
                    console.log('delete relation');
                }
            }
    )
});


var resultCsv = '';
var fileInput = document.getElementById("csv_history"),
        readFile = function (resultCsv) {
            var reader = new FileReader();
            reader.onload = function () {
                window['resultCsv'] = reader.result;
            };
            // start reading the file. When it is done, calls the onload event defined above.
            reader.readAsText(fileInput.files[0]);
        };
if (fileInput) {
    fileInput.addEventListener('change', readFile);
}


$("#csvButton").click(function () {
    console.log(resultCsv);
    $('.msgAjax').empty();
    $.ajax({
        type: "POST",
        url: "/ajax/save_history_links",
        data: {
            resultCsv: resultCsv,
            id: $(this).data('prj-id')
        },
        success: function (data) {

            if (data.status === 1) {
                swal("Сохранено", 'Ссылки успешно импортированы!<br>Добавлено: ' + data.count + '<br>Пропущенно: ' + data.count_r, "success");
                setTimeout(function () {
                    window.location.reload();
                }, 500);
                msg = 'Ссылки успешно импортированы!<br>Добавлено: ' + data.count + '<br>Пропущенно: ' + data.count_r;
                $('.msgAjax').append(msg);
            } else {
                swal("Ошибка", "Произошла ошибка при загрузке :(", "error");
            }
        },
        error: function (jqXHR, exception) {
            if (jqXHR.status === 0) {
                msg = 'Not connect.\n Verify Network.';
            } else if (jqXHR.status == 404) {
                msg = 'Requested page not found. [404]';
            } else if (jqXHR.status == 500) {
                msg = 'Internal Server Error [500].';
            } else if (exception === 'parsererror') {
                msg = 'Requested JSON parse failed.';
            } else if (exception === 'timeout') {
                msg = 'Time out error.';
            } else if (exception === 'abort') {
                msg = 'Ajax request aborted.';
            } else {
                msg = 'Uncaught Error.\n' + jqXHR.responseText;
            }
            $('.msgAjax').append(msg);
        },
    });
})

$('#search_button, .search-form .input-group input').on('keyup click', function () {
    search_data = $('.search-form .input-group input').val();
    if (search_data.length > 2) {

        $.ajax({
            type: "POST",
            url: "/ajax/global_search",
            data: {
                data: search_data
            },
            success: function (r) {
                console.log(r);
                if (r.status === 1) {
                    if ($.isArray(r.project)) {
                        var result = '<table class="table"><thead><tr><th scope="col" style="width: 55px;">ID</th><th scope="col">Название проекта</th><th scope="col">URL</th></tr></thead><tbody>';
                        var temp = '';
                        $.each(r.project, function (index, value) {
                            temp += '<tr><th scope="row" style="width: 55px;"><a href="/user/edit/' + value.user + '/project/' + value.id + '">' + value.id
                                    + '</a></th><td><a href="/user/edit/' + value.user + '/project/' + value.id + '">' + value.title +
                                    '</a></td><td>' + value.webSite + '</td></tr>';
                        });
                        result += temp;
                        result += '</tbody></table>';

                        $(".glob-search .project-search").empty();
                        $(".glob-search .project-search").append(result);
                    } else {
                        $(".glob-search .project-search").empty();
                    }

                    if ($.isArray(r.user)) {
                        var result = '<table class="table"><thead><tr><th scope="col">ID</th><th scope="col">Клиент</th><th scope="col">Email</th></tr></thead><tbody>';

                        var temp = '';
                        $.each(r.user, function (index, value) {
                            temp += '<tr><th scope="row"><a href="/user/edit/' + value.id + '">' + value.id
                                    + '</th><td><a href="/user/edit/' + value.id + '">' + value.fio +
                                    '</a></td><td><a href="/user/edit/' + value.id + '">' + value.email + '</a></td></tr>';
                        });
                        result += temp;
                        result += '</tbody></table>';
                        $(".glob-search .user-search").empty();
                        $(".glob-search .user-search").append(result);
                    } else {
                        $(".glob-search .user-search").empty();
                    }
                    $(".glob-search").css('display', 'block');
                    // $(".glob-search").css('display','block');
                    // $(".glob-search .project-search").append(result);
                }
            },
            error: function (jqXHR, exception) {
                if (jqXHR.status === 0) {
                    msg = 'Not connect.\n Verify Network.';
                } else if (jqXHR.status == 404) {
                    msg = 'Requested page not found. [404]';
                } else if (jqXHR.status == 500) {
                    msg = 'Internal Server Error [500].';
                } else if (exception === 'parsererror') {
                    msg = 'Requested JSON parse failed.';
                } else if (exception === 'timeout') {
                    msg = 'Time out error.';
                } else if (exception === 'abort') {
                    msg = 'Ajax request aborted.';
                } else {
                    msg = 'Uncaught Error.\n' + jqXHR.responseText;
                }
                $('.msgAjax').append(msg);
            },
        });
    } else {
        $(".glob-search").css('display', 'none');
        $(".glob-search .user-search").empty();
        $(".glob-search .project-search").empty();
    }
})

// Редактировать тех.задание
$('.edit-techdoc').on('keyup click', function () {

    var fields = $('#task').find(".techdoc-editable");

    fields.each(function (index) {

        $(this).prop("disabled", false);

    })
})

// Изменение поля тех.задания
$('#task').on('change', '.techdoc-editable', function () {

    $(this).addClass('changed');
    $(this).closest('.form-control-static').find('.input-group-addon').remove();
    $(this).closest('.form-control-static').append('<span class="input-group-addon" id="basic-addon2"><i class="fa fa-edit"></i></span>');

    $('.save-techdoc').removeClass('hide');

})

// Сохранить изменения
$('.save-techdoc').on('click', function () {

    var data = {
        'editor_id': $(this).val(),
        'project_id': $(this).data('pid'),
    };

    var fields = $('#task').find(".techdoc-editable.changed");

    fields.each(function (index) {

        data[$(this).attr('name')] = $(this).val();

    })

    var targetUrl = $('.target-url-table').find("tr");

    data['target'] = [];
    targetUrl.each(function (index) {
        if($(this).find('textarea[name=url_target]').val() !== undefined){

            data['target'].push({
                url: $(this).find('textarea[name=url_target]').val(),
                anchor: $(this).find('textarea[name=anchor_target]').val(),
                distribution: $(this).find('input[name=distribution_target]').val(),
                text: $(this).find('textarea[name=text_target]').val(),
                m_count: $(this).find('select[name=m_count_target]').val(),
                p_count: $(this).find('select[name=p_count_target]').val()
            });
            // da['url'] = $(this).find('input[name=url_target]').val();
            // da['anchor'] = $(this).find('input[name=anchor_target]').val();
            // da['distribution'] = $(this).find('input[name=distribution_target]').val();
            // da['text'] = $(this).find('textarea[name=text_target]').val();
        }
    })
    var jsonString = JSON.stringify( data['target']);
console.log(jsonString);
console.log(data);
    $.ajax({
        type: "POST",
        url: "/ajax/edit_techdoc_ajax",
        datatype: "json",
        data: {
            data: data
        },
        success: function (r) {
            console.log(r);
            if (r.status) {
                swal({
                    title: "Ок",
                    text: "Техническое задание обновлено!",
                    type: "success",
                    showCancelButton: false,
                    confirmButtonText: "Ok",
                    closeOnConfirm: true,
                }, function (isConfirm) {
                    if (isConfirm) {
                        location.reload();
                    } else {

                    }
                });
            }

        },
        error: function (jqXHR, exception) {
            console.log(jqXHR);
        }
    })


})

// Добавить особенности

$("body").delegate("#features span", "click", function () {

    var field = $('#features').find("textarea");
    if (field.val() != '') {

        var data = {
            'editor_id': $(this).data('uid'),
            'project_id': $(this).data('pid'),
            'message': field.val(),
        };
        console.log(data);
        $.ajax({
            type: "POST",
            url: "/ajax/addfeatures",
            data: {
                data: data
            },
            success: function (r) {
                console.log(r);
                if (r.status) {
                    swal({
                        title: "Ок",
                        text: "Особенность добавлена!",
                        type: "success",
                        showCancelButton: false,
                        confirmButtonText: "Ok",
                        closeOnConfirm: true,
                    }, function (isConfirm) {
                        if (isConfirm) {
                            location.reload();
                        } else {

                        }
                    });
                }

            },
            error: function (jqXHR, exception) {
                console.log(jqXHR);
            }
        })
    }
})

// удалить особенности

$(".delete-features").click(function () {

    var data = {
        'dalete_feature_id': $(this).data('id'),
    };
    console.log(data);
    $.ajax({
        type: "POST",
        url: "/ajax/addfeatures",
        data: {
            data: data
        },
        success: function (r) {
            console.log(r);
            if (r.status) {
                swal({
                    title: "Ок",
                    text: "Особенность удалена!",
                    type: "success",
                    showCancelButton: false,
                    confirmButtonText: "Ok",
                    closeOnConfirm: true,
                }, function (isConfirm) {
                    if (isConfirm) {
                        location.reload();
                    } else {

                    }
                });
            }
        },
        error: function (jqXHR, exception) {
            console.log(jqXHR);
        }
    })
})

// Редактировать особенности

$("body").delegate("#update-features span", "click", function () {

    var field = $('#update-features').find("textarea");
    if (field.val() != '') {
        var data = {
            'feature_id': $(this).data('fid'),
            'new_message': field.val(),
        };
        console.log(data);
        $.ajax({
            type: "POST",
            url: "/ajax/addfeatures",
            data: {
                data: data
            },
            success: function (r) {
                console.log(r);
                if (r.status) {
                    swal({
                        title: "Ок",
                        text: "Особенность изменена!",
                        type: "success",
                        showCancelButton: false,
                        confirmButtonText: "Ok",
                        closeOnConfirm: true,
                    }, function (isConfirm) {
                        if (isConfirm) {
                            location.reload();
                        } else {

                        }
                    });
                }

            },
            error: function (jqXHR, exception) {
                console.log(jqXHR);
            }
        })
    }
})

$('.updatefeatures ').on('click', function () {

        var text = $(this).data('message');
        var id= $(this).data('id');

        $('#update-features').find('textarea').val(text);
        $('#update-features').find('.updatefeatures').data('fid',id).attr('data-fid', id);

        }
)
// продлить проект из кабинета админ
$('button[name=renewal]').on('click', function (e) {
var data = {
    projectid: $(this).data('idproject')
};
$.post('/ajax/project/admin_pay_renewal', data, function (r) {
    hideLoader(loader);
    if (r.status) {
        swal("Успешно оплачено", "", "success");

        window.location.reload();
    } else {
        // $('#form-errors').fadeIn();
        swal("Ошибка", "Произошла ошибка.", "error");
        }
    }
    );
})

// удаление постера из проекта

$('.remove-poster-btn').on('click', function (e) {
    var data = {
        project: $(this).data('project'),
        poster: $(this).data('poster')
    };
    $.post('/ajax/project/delete_link_poster', data, function (r) {
        hideLoader(loader);
        console.log(r);
        if (r.status) {
            swal("Успешно", "", "success");

            // window.location.reload();
        } else {
            // $('#form-errors').fadeIn();
            swal("Ошибка", "Произошла ошибка.", "error");
        }
    });
})

function targetDistributionCount()
{
    let count = 0;
    $(document).find('.target-distribution-count').each(function( index ) {
        if ($(this).val() != '') {
            count = count + parseInt($( this ).val())
        }
    });
    $(document).find('.target-distribution').html(count)
}

$(document).on('change keyup', '.target-distribution-count', function (e) {
    targetDistributionCount()
})
$('.target-url-table').on('click', '.removeTargetUrlRow', function (e) {
    if($(this).closest('tr').siblings().length > 0) {
        $(this).closest('tr').remove();
        targetDistributionCount()
    }
})
$('.target-url-table').on('click', '.addTargetUrlRow', function (e) {
    var tr_current = $(this).closest('tr');
    var tr = tr_current.clone(true);
    tr.find('input').val('');
    tr_current.after(tr);
    targetDistributionCount()
})
$('.jqgrid-responsive').on('click', '.show-hide-column', function (e) {
    if ($(this).data('show') == 'show' ){
        table2.showCol("checkTrust");
        table2.showCol("spam");
        table2.showCol("ags");
        table2.showCol("cy");
        table2.showCol("wasAgs");
        table2.showCol("swVisits");
        table2.showCol("mjTF");
        table2.showCol("alexaTrafRank");
        table2.showCol("markets");
        table2.showCol("liVisitors");
        table2.showCol("checkTrustMessage");
        $(this).data('show','hide');
    } else {
        table2.hideCol("checkTrust");
        table2.hideCol("spam");
        table2.hideCol("ags");
        table2.hideCol("cy");
        table2.hideCol("wasAgs");
        table2.hideCol("swVisits");
        table2.hideCol("mjTF");
        table2.hideCol("alexaTrafRank");
        table2.hideCol("markets");
        table2.hideCol("liVisitors");
        table2.hideCol("checkTrustMessage");
        $(this).data('show','show');

    }

})

$('.target-url-table').on('change', '.change_count_url_poster', function(){
    var data = {
        id: $(this).data('id'),
        type: 0,
        count: $(this).val()
    };

    $.post('/ajax/poster_save_count_url', data, function (r) {
        if (r.status) {

            swal("Ok", "Сохранено", "success");
        } else {
            swal("Ошибка", "Произошла ошибка :(", "error");
        }
    });
})
$('.target-url-table').on('change', '.change_count_url_moder', function(){
    var data = {
        id: $(this).data('id'),
        type: 1,
        count: $(this).val()
    };

    $.post('/ajax/poster_save_count_url', data, function (r) {
        if (r.status) {
            swal("Ok", "Сохранено", "success");
        } else {
            swal("Ошибка", "Произошла ошибка :(", "error");
        }
    });
})
 /** закрыть проект */
$('button[name=close_project_button]').on('click', function (e) {
    var id = $(this).data('idproject');
    $.post('/ajax/closed-project-manually-moder', {id: id}, function (r) {
        window.location.reload();
    });
});
 /** открыть заново проект */
$('button[name=open_project_button]').on('click', function (e) {
    var id = $(this).data('idproject');
    $.post('/ajax/open-project-manually-moder', {id: id}, function (r) {
        window.location.reload();
    });
})

/* спрятать реф-баннер*/
$(document).on('click', '.ref-info-block__close', function(e) {
    e.preventDefault;
    e.stopPropagation;
    $(this).closest('.ref-info-block').fadeOut()
});

// // change pay method tabs
// $(document).on("change", ".method input", function (e) {
//     var methodId = $(this).prop("id");
//     $(".panel.panel-hide").each(function (e) {
//         // $(this).removeClass("active");
//         $(this).fadeOut(300, function () {
//             if ($(this).data("method") == methodId) {
//                 // $(this).addClass("active");
//                 $(this).delay(300).fadeIn(300);
//             }
//         });
//     });
// });
//
$(document).on("change", "input[name='payoneer-user']", function (e) {
    var userType = $(this).data("payoneer");
    $(".form-payoneer").each(function (e) {
        $(this).fadeOut(300, function () {
            if ($(this).hasClass(userType)) {
                $(this).delay(300).fadeIn(300);
            }
        });
    });
});

$(document).on("change", "input[name='user-secondary']", function (e) {
    var userType = $(this).data("payoneer");
    $(".form-payoneer").each(function (e) {
        $(this).fadeOut(300, function () {
            if ($(this).hasClass(userType)) {
                $(this).delay(300).fadeIn(300);
            }
        });
    });
});


// $(document).on("input", ".form-payment input[name='summ']", function (e) {
//     var amount = (+$(this).val() * +$(this).parent().siblings().find("input[name='ipn']").val()) / 100 + +$(this).val(),
//         summWrap = $(this).parent().siblings().find(".total-count__summ");
//     summWrap.children(".summ-amount").text(amount);
//     summWrap.children("input[name='amount']").val(amount);
// });

// $(function () {
//     $('.form-payment').parsley().on('field:validated', function() {
//         var ok = $('.parsley-error').length === 0;
//         $('.bs-callout-info').toggleClass('hidden', !ok);
//         $('.bs-callout-warning').toggleClass('hidden', ok);
//     })
// });


$(document).on("input", "input[name='summ']", function () {
    var amount = ($(this).val() * (1 + $("input[name='ipn']").val() / 100)).toFixed();
    $(".summ-amount").text(amount);
    $("input[name='amount']").val(amount);
});

// SET INTERVAL FIELD ACTIVE
$("#interval").on("change", function () {
    console.log($(this).val());
});

$(document).on("input", "#import-ta", function () {

    if($(this).val() != ''){
        $('#import-target-button').attr('disabled', false);
    }else{
        $('#import-target-button').attr('disabled', true);
    }
});

$('.table-selected-input').on("change", 'input[name="mass-action"]', function () {

    if($(this).is(":checked")){

        $(this).closest('tr').addClass('checked');
    }else{
        $(this).closest('tr').removeClass('checked');

    }
});




// CATALOG ---------------------------------------------------------------------------
// const $btn_filter = $(document).find("button#filter-btn");

// $btn_filter.on("click", () => {
//     $('.filter').toggleClass('hidden');
// });


// Column edit

// Переменные
const default_column = ['тип площадки', 'тип ссылки', 'тематика', 'трафик', 'tf', 'икс', 'цена'];
let actual_setting = [];
let showedColumn = [];
let addProj;

// Обработчики
$('#setting-column-btn').on('click', checkedActualColumn);

// Клик выделить все параметры
$(document).on('change', '.select-all-filter', function () {
    if (!$(this).is(":checked")) {
        $( "#setting-column-form").find('.column-filter').each(function( index ) {
            $(this).prop('checked', false);
        });
    } else {
        // Откроем все табы
    $('#collapseExample').collapse('show');
    $('#platform-param').collapse('show');
    $('#platform-param2').collapse('show');
        $( "#setting-column-form").find('.column-filter').each(function( index ) {
            $(this).prop('checked', true);
        });
    }
});

$(document).on('click', '.add-platform', (e) => {
    if ($(e.target).hasClass('added-to-cart')) {
        // Определяем id
        const id = $(e.target).data('id');
        $.each( cart.items, function( key, value ) {
            if (typeof value !== "undefined" && value.id === id) {
                cart.items.splice(key, 1);
            }
        });
        $(e.target).removeClass('added-to-cart').html('Добавить');
        updateCart();
        return false;
    }
    // e.target.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="15.556" height="11.314" viewBox="0 0 15.556 11.314">\n' +
    //     '  <g id="Сгруппировать_7542" data-name="Сгруппировать 7542" transform="translate(-1771.343 -1119.101)">\n' +
    //     '    <rect id="Прямоугольник_8139" data-name="Прямоугольник 8139" width="2" height="14" rx="1" transform="translate(1785.485 1119.101) rotate(45)" fill="#fff"/>\n' +
    //     '    <rect id="Прямоугольник_8138" data-name="Прямоугольник 8138" width="8" height="2" rx="1" transform="translate(1772.757 1123.343) rotate(45)" fill="#fff"/>\n' +
    //     '  </g>\n' +
    //     '</svg>&nbsp;Добавлено';
    // Теперь найдем все и поставим отмену
    $(e.target).text('Отмена')
    // $( ".added-to-cart" ).each(function( index ) {
    //     $(this).text('Отмена');
    // });
    $(e.target).addClass("added-to-cart");
    $('.alert-create-project').removeClass('hidden');
    $('#s-mobile-cart').removeClass('hidden');
    $('#mobile-cart').removeClass('hidden');
    $('.catalog').addClass('alert-create-project-open');
    Chatra('hide');
    cartPosition();

    // Добвыим в корзину объект
    let obj = {
        'id' : $(e.target).data('id'),
        'type' : $(e.target).data('type'),
        'price' : parseFloat($(e.target).data('price')),
        'domain' : $(e.target).data('domain'),
    }
    // Обновим дату
    cart['items'].push( obj );
    updateCart();
    addProj = e.target;
})

$('.del-tr').on('click', onDeleteTrClick)

// $('.create-project').on('click', () => {
//     const a = '<svg xmlns="http://www.w3.org/2000/svg" width="15.556" height="11.314" viewBox="0 0 15.556 11.314"><g id="Сгруппировать_7542" data-name="Сгруппировать 7542" transform="translate(-1771.343 -1119.101)"><rect id="Прямоугольник_8139" data-name="Прямоугольник 8139" width="2" height="14" rx="1" transform="translate(1785.485 1119.101) rotate(45)" fill="#fff"/><rect id="Прямоугольник_8138" data-name="Прямоугольник 8138" width="8" height="2" rx="1" transform="translate(1772.757 1123.343) rotate(45)" fill="#fff"/></g></svg>'
//     // $(document).find('.alert-create-project').addClass('hidden');
//     addProj.innerHTML = a + 'Добавлено';
// })

$('.delete-platform svg').on('click', function() {
    if($('.alert-create-project .last-platform').children().length === 1) {
        $('.alert-create-project').fadeOut({
        easing: 'linear'
        });
        $('#mobile-cart').fadeOut({
            easing: 'linear'
        });
        $('#s-mobile-cart').fadeOut({
            easing: 'linear'
        });
    } else {$(this).parent().remove();}
})


// Функции
function consoles() {
    const defaultCheckbox = [];
    default_column.forEach(el => {
        $('.column-filter').prop('checked', false);
        defaultCheckbox.push($('#setting-column-form').find(`.column-filter[value="${el}"]`))
    })
    defaultCheckbox.forEach(el => {
        $(el).prop('checked', true);
    })
    $(document).find('.platform-th').each((i,el) => $(el).addClass('hidden'));
    default_column.forEach(el => {
        $(document).find(`.platform-th[data-value="${el}"`).removeClass('hidden');
    })
    let now = new Date();
    now.setTime(now.getTime() + 24 * 3600 * 1000);
    document.cookie = "mySelectedColumnForFilter=false; expires=" + now.toUTCString() + "; path=/";
}

function onCancelClick() {
    $(document).find('.alert-create-project').addClass('hidden');
    // Найдем все что добавили и очистим
    $( ".added-to-cart" ).each(function( index ) {
        $(this).html('Добавить');
        $(this).removeClass('added-to-cart');
    });
    cart.items = [];
    let now = new Date();
    now.setTime(now.getTime() + 24 * 3600 * 1000);
    document.cookie = "mySelectItemsInCart= false; expires=" + now.toUTCString() + "; path=/";
}

function onSettingSubmit(e) {
    getActualSetting(e);
    showedColumn = [];
    showFilteredColumn();
    saveCoocie();
}

function getActualSetting(e) {
    actual_setting = [];
    $('#setting-column-form').find('input:checked').each((i, el) => {
        actual_setting.push($(el).attr('value'));
    })
};


function showFilteredColumn() {
    actual_setting.forEach(el => {
        showedColumn.push($('.tabel-catalog').find(`td[data-value="${el}"]`))
        showedColumn.push($('.tabel-catalog').find(`th[data-value="${el}"]`))
    })

    $(document).find('.platform-th').each((i,el) => $(el).addClass('hidden'));

    showedColumn.forEach(el => {
        if(el.length !== 0) {
            $(document).find(el).removeClass('hidden')
        }
    })
}

function checkedActualColumn() {
    let actual_columns = [];
    $(document).find(".column").each((i, el) => {
        if(!$(el).hasClass('hidden')) {
            actual_columns.push($(el).attr('data-value'));
        }
    });

    $('.column-filter').each((i, el) => {
        for(let i = 0; i < $('.column-filter').length - 1; i++) {
            if($(el).attr('value') == actual_columns[i]) {
                $(el).prop('checked', true);
            }
        }
    })
};



function showColl() {
    $(this).addClass('open');
}

function onDeleteTrClick() {
    console.log('hello')
    $(this).parent().remove();
}

(function() {
    $('.alert-create-project').width($('.catalog-header').width() - 5);
}())
$( window ).resize(function() {
    setTimeout(function () {
        $('.alert-create-project').width($('.catalog-header').width() - 5);
    }, 200)
});

//Cookies
function saveCoocie(){
    let myJsonString = JSON.stringify(actual_setting);
    let now = new Date();
    now.setTime(now.getTime() + 24 * 3600 * 1000);
    document.cookie = "mySelectedColumnForFilter=" + myJsonString + "; expires=" + now.toUTCString() + "; path=/";
}

$(document).ready(function () {
    if (getCookie("mySelectedColumnForFilter")) {
        if (getCookie("mySelectedColumnForFilter") !== 'false' ) {
            let mySelectedColumn = $.parseJSON(getCookie("mySelectedColumnForFilter"));
            actual_setting = mySelectedColumn;
            showedColumn = [];
            showFilteredColumn();
        }
    }
})

// Фиксация корзины
$(function(){
    $(window).scroll(function()
    {
        cartPosition();
    });
});

cartPosition = function () {
    if ($('section.catalog').hasClass('alert-create-project-open') && $(window).width() > 1024) {
        let docViewTop = $(window).scrollTop();
        let docViewBottom = docViewTop + $(window).height();
        let elemTop = $('.alert-container-height').offset().top;
        let elemBottom = elemTop + $('.alert-container-height').height();
        if ((elemBottom <= docViewBottom) && (elemTop >= docViewTop)) {
            let needHeight = elemBottom + 30;
            if (!$('.alert-create-project').hasClass('fix-bottom')) {
                $('.alert-container-height').css('height', '195px');
            }
            if (docViewBottom >= needHeight) {
                $('.alert-create-project').addClass('fix-bottom');
                $('.alert-container-height').css('height', '0px');
            } else {
                $('.alert-create-project').removeClass('fix-bottom');
                $('.alert-container-height').css('height', '195px');
            }
        } else {
            $('.alert-create-project').removeClass('fix-bottom');
            $('.alert-container-height').css('height', '195px');
        }
    } else {
        $('.alert-container-height').css('height', '0px');
    }
}

let cart = {
    'items' : [],
};

let readyCreateProject = false;

updateCart = function () {
    $('.alert-create-project').width($('.catalog-header').width() - 5);
    // Если корзина пуста, скрываем ее
    if (!cart.items.length) {
        $('.alert-create-project').addClass('hidden');
        $('#mobile-cart').addClass('hidden');
        $('#s-mobile-cart').addClass('hidden');
        $('#modal-edit').modal('hide');
        $('#modal-cart').modal('hide');
        Chatra('show');
    }

    // Определим валюту строкой
    let userCurrencyStr = $('.alert-container').data('currecy');
    let userMinValue = $('.alert-container').data('minvalue');
    // Считаем сумму корзины
    let totalPrice = 0;
    $.each( cart.items, function( key, items ) {
        totalPrice += items.price;
    });

    // Обновим список площадок добавленных
    $('.last-platform li').remove();
    let reverseItems = cart.items.reverse();
    $.each( reverseItems, function( key, value ) {
        if (key < 3) {
            $('.last-platform').append('<li><span data-id="' + value.id + '" class="remove-platform"></span>' + value.domain + '</li>');
        }
    });

    //  Заполним форму для редактирования
    $('#platform-list-modal-type-1').empty();
    $('#platform-list-modal-type-2').empty();
    $('#platform-list-modal-type-3').empty();
    $.each( cart.items, function( key, value ) {
        if (value.type === 1 || value.type === 3) {
            $('#platform-list-modal-type-1').append('<li><span data-id="' + value.id + '" class="remove-platform"></span>' + value.domain + '<span class="price-platform">' + value.price + ' ' + userCurrencyStr + '</span></li>');
        } else if(value.type === 4 || value.type === 2 || value.type === 5) {
            $('#platform-list-modal-type-2').append('<li><span data-id="' + value.id + '" class="remove-platform"></span>' + value.domain + '<span class="price-platform">' + value.price + ' ' + userCurrencyStr + '</span></li>');
        } else {
            $('#platform-list-modal-type-3').append('<li><span data-id="' + value.id + '" class="remove-platform"></span>' + value.domain + '<span class="price-platform">' + value.price + ' ' + userCurrencyStr + '</span></li>');
        }
    });
    $('#platform-list-modal-type-1').append('<li class="add-platform-li"><span class="remove-platform add-platform-span"></span>Добавить еще площадку</span></li>');
    $('#platform-list-modal-type-2').append('<li class="add-platform-li"><span class="remove-platform add-platform-spa"></span>Добавить еще площадку</span></li>');
    $('#platform-list-modal-type-3').append('<li class="add-platform-li"><span class="remove-platform add-platform-spa"></span>Добавить еще площадку</span></li>');


    // Сгрупируем площадки по типу
    let areaTypeArray = {
        '1' : {
            'total' : 0,
            'price' : 0,
        },
        '2' : {
            'total' : 0,
            'price' : 0,
        },
        '3' : {
            'total' : 0,
            'price' : 0,
        },
    };
    $.each( cart.items, function( key, value ) {
        if (value.type === 1 || value.type === 3) {
            areaTypeArray['1']['total']++;
            areaTypeArray['1']['price'] += value.price;
        } else if(value.type === 4 || value.type === 2 || value.type === 5) {
            areaTypeArray['2']['total']++;
            areaTypeArray['2']['price'] += value.price;
        } else {
            areaTypeArray['3']['total']++;
            areaTypeArray['3']['price'] += value.price;
        }
    });

    // Вставим нужные данные о количестве площадок и т.п.
    $('.platform-list-type-1').find('.platform-list-count').text(areaTypeArray['1']['total']);
    $('.platform-list-type-1').find('.platform-list-currency').text(parseFloat(areaTypeArray['1']['price']).toFixed(2));
    $('.platform-list-type-2').find('.platform-list-count').text(areaTypeArray['2']['total']);
    $('.platform-list-type-2').find('.platform-list-currency').text(parseFloat(areaTypeArray['2']['price']).toFixed(2));
    $('.platform-list-type-3').find('.platform-list-count').text(areaTypeArray['3']['total']);
    $('.platform-list-type-3').find('.platform-list-currency').text(parseFloat(areaTypeArray['3']['price']).toFixed(2));

    // Вставляем сумму корзины
    $('.cart-count').text(parseFloat(totalPrice).toFixed(2));
    // Вставляем общее число добавленных площадок
    $('.total-count-in-cart').text(cart.items.length);
    // Проверим, можно ли создавать проект
    if (parseFloat(totalPrice) >= parseFloat($('button.create-project').data('minvalue'))) {
        $('button.create-project').removeClass('disabled');
        readyCreateProject = true;
        // Убираем надпись
        // $('.need-to-pay').addClass('hidden');
    } else {
        $('button.create-project').addClass('disabled');
        readyCreateProject = false;
        // Показываем надпись
        // $('.need-to-pay').removeClass('hidden');
        // $('.need-to-pay').find('span').text(parseFloat($('button.create-project').data('minvalue'))-parseFloat(totalPrice));
    }
    cartCookies();
}

/**
 * Создание проекта
 */
$(document).on('click', '.create-project', function () {
    // Если можно создать проект
    if (readyCreateProject) {
        $('#cartAttribute').val(JSON.stringify(cart));
        $( "#readyCreateProject" ).submit();
    }
});

// Удалить из массива что то
$(document).on('click', '.remove-platform', function () {
    const id = $(this).data('id');
    $.each( cart.items, function( key, value ) {
        if (typeof value !== "undefined" && value.id === id) {
            cart.items.splice(key, 1);
        }
    });
    $(this).closest('li').remove();
    // Найдем на странице эту площадку и вернем ее в список
    $('.add-platform.added-to-cart').each(function( index ) {
        if (id == $(this).data('id')) {
            $(this).removeClass('added-to-cart').html('Добавить');
        }
      });
    updateCart();
})

// Добавить еще площадок
$(document).on('click', '.add-platform-li', function () {
    $('#modal-edit').modal('hide');
})

//Добавить cookies корзине
function cartCookies(){
    let objJsonString = JSON.stringify(cart);
    let now = new Date();
    now.setTime(now.getTime() + 24 * 3600 * 1000);
    document.cookie = "mySelectItemsInCart=" + objJsonString + "; expires=" + now.toUTCString() + "; path=/";
}

$(document).ready(function () {
    const catalogPage = $(document).find('section.catalog');
     if (catalogPage.length) {
            if (getCookie("mySelectItemsInCart")) {
                if (getCookie("mySelectItemsInCart") !== 'false' ) {
                    let mySelectedItems = $.parseJSON(getCookie("mySelectItemsInCart"));
                    cart = mySelectedItems;

                        $.each(mySelectedItems.items, function( key, value ) {
                            let findBtn = $(document).find('.add-platform[data-id="' + value.id + '"]');
                            if (findBtn.length){
                                findBtn.addClass('added-to-cart').html('Отменить');
                            }
                    });

                    $('.alert-create-project').removeClass('hidden');
                    $('#mobile-cart').removeClass('hidden');
                    $('#s-mobile-cart').removeClass('hidden');
                    updateCart();
                     $('section.catalog').addClass('alert-create-project-open');
                        Chatra('hide');
                        cartPosition();
                }
            }
     } 
})

/////////////////////////////////////////////////////////////////

$(document).ready(function () {
    const catalogPage = $(document).find('section.catalog');
    if (catalogPage.length) {
        let
            url_input = $('.url-input>input'),
            type_select = $('.type-select'),
            subject_select = $('.subject-select'),
            country_select = $('.country-select'),
            city_select = $('.city-select'),
            language_select = $('.language-select'),
            trast_inputs = $('.trast-inputs>input'),
            spam_inputs = $('.spam-inputs>input'),
            iks_inputs = $('.iks-inputs>input'),
            tf_inputs = $('.tf-inputs>input'),
            cf_inputs = $('.cf-inputs>input'),
            tr_inputs = $('.tr-inputs>input'),
            alexa_inputs = $('.alexa-inputs>input'),
            da_moz_inputs = $('.da-moz-inputs>input'),
            da_spam_score_inputs = $('.da-spam-score-inputs>input'),
            trafic_inputs = $('.trafic-inputs>input'),
            http_checkbox = $('.http-checkbox input'),
            https_checkbox = $('.https-checkbox input'),
            link_profile_select = $('.link-profile-select'),
            all_checkbox = $('.all-checkbox input'),
            dofollow_checkbox = $('.dofollow-checkbox input'),
            nofollow_checkbox = $('.nofollow-checkbox input'),
            ugc_checkbox = $('.ugc-checkbox input'),
            redirect_checkbox = $('.redirect-checkbox input'),
            active_checkbox = $('.active-checkbox input'),
            noactive_checkbox = $('.noactive-checkbox input'),
            date_inputs = $('.date-inputs>input'),
            getListItem = function (label, data_class, country = null) {
                let str = ''
                if (country !== null) {
                    str = '<li data-country="'+ country +'" class=\"btn-group btn-del-filter\" role=\"group\" aria-label=\"Basic example\">\n'
                } else {
                    str = '<li class=\"btn-group btn-del-filter\" role=\"group\" aria-label=\"Basic example\">\n'
                }
                return "\n" +
                    str +
                    "<a class=\"btn btn-xs fs-12 btn-default-outline \" href=\"javascript:void(0)\">" + label + "</a>\n" +
                    "<a class=\"btn btn-xs fs-12 btn-default-outline filter-tag-close-btn\" data-class=" + data_class + ">\n" +
                    "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"11.414\" height=\"11.414\" viewBox=\"0 0 11.414 11.414\">\n" +
                    "<g id=\"Сгруппировать_7564\" data-name=\"Сгруппировать 7564\" transform=\"translate(-505.793 -699.793)\">\n" +
                    "<line id=\"Линия_2104\" data-name=\"Линия 2104\" y1=\"10\" x2=\"10\" transform=\"translate(506.5 700.5)\" fill=\"none\" stroke=\"#707070\" stroke-linecap=\"round\" stroke-width=\"1\"/>\n" +
                    "<line id=\"Линия_2105\" data-name=\"Линия 2105\" x2=\"10\" y2=\"10\" transform=\"translate(506.5 700.5)\" fill=\"none\" stroke=\"#707070\" stroke-linecap=\"round\" stroke-width=\"1\"/>\n" +
                    "</g>\n" +
                    "</svg></a>\n" +
                    "</li>"
            },
            get_params = {}

        init()
        checkCountries()
        $('.filter-form-id').bind('input change dp.change', function (event) {
            init()
        });

        function clearForm(class_name, label = null) {
            let arr = class_name.split('-')
            let type = arr[arr.length - 1]
            if (class_name === 'protocol-checkboxes') {
                $(http_checkbox).removeAttr('checked')
                $(https_checkbox).removeAttr('checked')
            } else if (class_name === 'url-checkboxes') {
                $(all_checkbox).removeAttr('checked')
                $(dofollow_checkbox).removeAttr('checked')
                $(nofollow_checkbox).removeAttr('checked')
                $(ugc_checkbox).removeAttr('checked')
                $(redirect_checkbox).removeAttr('checked')
                $(active_checkbox).removeAttr('checked')
                $(noactive_checkbox).removeAttr('checked')
            } else if (type === 'input') {
                $($("." + class_name + ">input")[0]).val("")
            } else if (type === 'select') {
                if (label !== null) {
                    $('.chosen-select' + '.' + class_name + ' option:contains("'+ label +'")').prop('selected', false).trigger("liszt:updated").trigger('chosen:updated');
                } else {
                    $('.chosen-select' + '.' + class_name + ' option').prop('selected', false).trigger("liszt:updated").trigger('chosen:updated');
                }
            } else if (type === 'inputs') {
                $($("." + class_name + ">input")[0]).val("")
                $($("." + class_name + ">input")[1]).val("")
            }
        }

        function checkTags() {
            let tags_labels = [],
                get_params = {}
            if ($(trast_inputs[0]).val() || $(trast_inputs[1]).val()) {
                let trast_inputs_str = trast_inputs.parent().prev().text() + ': '
                if ($(trast_inputs[0]).val()) {
                    get_params.trust_from = $(trast_inputs[0]).val()
                    trast_inputs_str = trast_inputs_str + "от " + $(trast_inputs[0]).val() + " "
                }
                if ($(trast_inputs[1]).val()) {
                    get_params.trust_to = $(trast_inputs[1]).val()
                    trast_inputs_str = trast_inputs_str + "до " + $(trast_inputs[1]).val()
                }
                tags_labels.push({
                    label: trast_inputs_str,
                    class_name: "trast-inputs"
                });
            }
//
            if ($(spam_inputs[0]).val() || $(spam_inputs[1]).val()) {
                let spam_inputs_str = spam_inputs.parent().prev().text() + ': '
                if ($(spam_inputs[0]).val()) {
                    get_params.spam_from = $(spam_inputs[0]).val()
                    spam_inputs_str = spam_inputs_str + "от " + $(spam_inputs[0]).val() + " "
                }
                if ($(spam_inputs[1]).val()) {
                    get_params.spam_to = $(spam_inputs[1]).val()
                    spam_inputs_str = spam_inputs_str + "до " + $(spam_inputs[1]).val()
                }
                tags_labels.push({
                    label: spam_inputs_str,
                    class_name: "spam-inputs"
                });
            }
//
            if ($(iks_inputs[0]).val() || $(iks_inputs[1]).val()) {
                let iks_inputs_str = iks_inputs.parent().prev().text() + ': '
                if ($(iks_inputs[0]).val()) {
                    get_params.iks_from = $(iks_inputs[0]).val()
                    iks_inputs_str = iks_inputs_str + "от " + $(iks_inputs[0]).val() + " "
                }
                if ($(iks_inputs[1]).val()) {
                    get_params.iks_to = $(iks_inputs[1]).val()
                    iks_inputs_str = iks_inputs_str + "до " + $(iks_inputs[1]).val()
                }
                tags_labels.push({
                    label: iks_inputs_str,
                    class_name: "iks-inputs"
                });
            }
//
            if ($(tf_inputs[0]).val() || $(tf_inputs[1]).val()) {
                let tf_inputs_str = tf_inputs.parent().prev().text() + ': '
                if ($(tf_inputs[0]).val()) {
                    get_params.tf_from = $(tf_inputs[0]).val()
                    tf_inputs_str = tf_inputs_str + "от " + $(tf_inputs[0]).val() + " "
                }
                if ($(tf_inputs[1]).val()) {
                    get_params.tf_to = $(tf_inputs[1]).val()
                    tf_inputs_str = tf_inputs_str + "до " + $(tf_inputs[1]).val()
                }
                tags_labels.push({
                    label: tf_inputs_str,
                    class_name: "tf-inputs"
                });
            }
//
            if ($(cf_inputs[0]).val() || $(cf_inputs[1]).val()) {
                let cf_inputs_str = cf_inputs.parent().prev().text() + ': '
                if ($(cf_inputs[0]).val()) {
                    get_params.cf_from = $(cf_inputs[0]).val()
                    cf_inputs_str = cf_inputs_str + "от " + $(cf_inputs[0]).val() + " "
                }
                if ($(cf_inputs[1]).val()) {
                    get_params.cf_to = $(cf_inputs[1]).val()
                    cf_inputs_str = cf_inputs_str + "до " + $(cf_inputs[1]).val()
                }
                tags_labels.push({
                    label: cf_inputs_str,
                    class_name: "cf-inputs"
                });
            }
//
            if ($(tr_inputs[0]).val() || $(tr_inputs[1]).val()) {
                let tr_inputs_str = tr_inputs.parent().prev().text() + ': '
                if ($(tr_inputs[0]).val()) {
                    get_params.tr_from = $(tr_inputs[0]).val()
                    tr_inputs_str = tr_inputs_str + "от " + $(tr_inputs[0]).val() + " "
                }
                if ($(tr_inputs[1]).val()) {
                    get_params.tr_to = $(tr_inputs[1]).val()
                    tr_inputs_str = tr_inputs_str + "до " + $(tr_inputs[1]).val()
                }
                tags_labels.push({
                    label: tr_inputs_str,
                    class_name: "tr-inputs"
                });
            }
//
            if ($(alexa_inputs[0]).val() || $(alexa_inputs[1]).val()) {
                let alexa_inputs_str = alexa_inputs.parent().prev().text() + ': '
                if ($(alexa_inputs[0]).val()) {
                    get_params.alexarank_from = $(alexa_inputs[0]).val()
                    alexa_inputs_str = alexa_inputs_str + "от " + $(alexa_inputs[0]).val() + " "
                }
                if ($(alexa_inputs[1]).val()) {
                    get_params.alexarank_to = $(alexa_inputs[1]).val()
                    alexa_inputs_str = alexa_inputs_str + "до " + $(alexa_inputs[1]).val()
                }
                tags_labels.push({
                    label: alexa_inputs_str,
                    class_name: "alexa-inputs"
                });
            }
//
            if ($(da_moz_inputs[0]).val() || $(da_moz_inputs[1]).val()) {
                let da_moz_inputs_str = da_moz_inputs.parent().prev().text() + ': '
                if ($(da_moz_inputs[0]).val()) {
                    get_params.damoz_from = $(da_moz_inputs[0]).val()
                    da_moz_inputs_str = da_moz_inputs_str + "от " + $(da_moz_inputs[0]).val() + " "
                }
                if ($(da_moz_inputs[1]).val()) {
                    get_params.damoz_to = $(da_moz_inputs[1]).val()
                    da_moz_inputs_str = da_moz_inputs_str + "до " + $(da_moz_inputs[1]).val()
                }
                tags_labels.push({
                    label: da_moz_inputs_str,
                    class_name: "da-moz-inputs"
                });
            }
//
            if ($(da_spam_score_inputs[0]).val() || $(da_spam_score_inputs[1]).val()) {
                let da_spam_score_inputs_str = da_spam_score_inputs.parent().prev().text() + ': '
                if ($(da_spam_score_inputs[0]).val()) {
                    get_params.daspamscore_from = $(da_spam_score_inputs[0]).val()
                    da_spam_score_inputs_str = da_spam_score_inputs_str + "от " + $(da_spam_score_inputs[0]).val() + " "
                }
                if ($(da_spam_score_inputs[1]).val()) {
                    get_params.daspamscore_to = $(da_spam_score_inputs[1]).val()
                    da_spam_score_inputs_str = da_spam_score_inputs_str + "до " + $(da_spam_score_inputs[1]).val()
                }
                tags_labels.push({
                    label: da_spam_score_inputs_str,
                    class_name: "da-spam-score-inputs"
                });
            }
//
            if ($(trafic_inputs[0]).val() || $(trafic_inputs[1]).val()) {
                let trafic_inputs_str = trafic_inputs.parent().prev().text() + ': '
                if ($(trafic_inputs[0]).val()) {
                    get_params.attendance_from = $(trafic_inputs[0]).val()
                    trafic_inputs_str = trafic_inputs_str + "от " + $(trafic_inputs[0]).val() + " "
                }
                if ($(trafic_inputs[1]).val()) {
                    get_params.attendance_to = $(trafic_inputs[1]).val()
                    trafic_inputs_str = trafic_inputs_str + "до " + $(trafic_inputs[1]).val()
                }
                tags_labels.push({
                    label: trafic_inputs_str,
                    class_name: "trafic-inputs"
                });
            }
//
            if ($(date_inputs[0]).val() || $(date_inputs[1]).val()) {
                let date_inputs_str = date_inputs.parent().prev().text() + ': '
                if ($(date_inputs[0]).val()) {
                    get_params.date_from = $(date_inputs[0]).val().split('-').reverse().join('.')
                    date_inputs_str = date_inputs_str + "от " + $(date_inputs[0]).val().split('-').reverse().join('.') + " "
                }
                if ($(date_inputs[1]).val()) {
                    get_params.date_to = $(date_inputs[1]).val().split('-').reverse().join('.')
                    date_inputs_str = date_inputs_str + "до " + $(date_inputs[1]).val().split('-').reverse().join('.')
                }
                tags_labels.push({
                    label: date_inputs_str,
                    class_name: "date-inputs"
                });
            }

            if ($(http_checkbox).is(':checked') || $(https_checkbox).is(':checked')) {
                let str = $('.filter-protocol-label').text() + ": ";
                params_arr = [];
                if ($(http_checkbox).is(':checked') && $(https_checkbox).is(':checked')) {
                    str = str + http_checkbox.parent().text().trim() + ', ' + https_checkbox.parent().text().trim()
                    params_arr = ["0", "1"]
                } else if ($(https_checkbox).is(':checked')) {
                    str = str + https_checkbox.parent().text().trim()
                    params_arr = ["1"]
                } else if ($(http_checkbox).is(':checked')) {
                    str = str + http_checkbox.parent().text().trim()
                    params_arr = ["0"]
                }
                get_params.httpsHttp = params_arr;
                tags_labels.push({
                    label: str,
                    class_name: "protocol-checkboxes"
                });
            }
//
            let url_checkboxes_str = '';
            params_arr_url_type = []
            if ($(all_checkbox).is(':checked')) {
                dofollow_checkbox.prop("checked", true)//.attr("disabled", true);
                nofollow_checkbox.prop("checked", true)//.attr('disabled', true)
                ugc_checkbox.prop("checked", true)//.attr('disabled', true)
                redirect_checkbox.prop("checked", true)//.attr('disabled', true)
                active_checkbox.prop("checked", true)//.attr('disabled', true)
                noactive_checkbox.prop("checked", true)//.attr('disabled', true)
                url_checkboxes_str = url_checkboxes_str + all_checkbox.parent().text().trim() + ', '
            }

            if ($(dofollow_checkbox).is(':checked')) {
                params_arr_url_type.push(dofollow_checkbox.val())
                url_checkboxes_str = url_checkboxes_str + dofollow_checkbox.parent().text().trim() + ', '
            }
            if ($(nofollow_checkbox).is(':checked')) {
                params_arr_url_type.push(nofollow_checkbox.val())
                url_checkboxes_str = url_checkboxes_str + nofollow_checkbox.parent().text().trim() + ', '
            }
            if ($(ugc_checkbox).is(':checked')) {
                params_arr_url_type.push(ugc_checkbox.val())
                url_checkboxes_str = url_checkboxes_str + ugc_checkbox.parent().text().trim() + ', '
            }
            if ($(redirect_checkbox).is(':checked')) {
                params_arr_url_type.push(redirect_checkbox.val())
                url_checkboxes_str = url_checkboxes_str + redirect_checkbox.parent().text().trim() + ', '
            }
            if ($(active_checkbox).is(':checked')) {
                get_params.activeInactive = active_checkbox.val()
                url_checkboxes_str = url_checkboxes_str + active_checkbox.parent().text().trim() + ', '
            }
            if ($(noactive_checkbox).is(':checked')) {
                get_params.noactiveInactive = noactive_checkbox.val()
                url_checkboxes_str = url_checkboxes_str + noactive_checkbox.parent().text().trim() + ', '
            }

            if (url_checkboxes_str) {
                get_params.urlType = params_arr_url_type;
                tags_labels.push({
                    label: $('.filter-checkboxes-label').text() + ': ' + removeLastComma(url_checkboxes_str),
                    class_name: "url-checkboxes"
                });
            }
//
            if (url_input.val()) {
                get_params.url = url_input.val()
                tags_labels.push({
                    label: url_input.prev().text() + ': ' + url_input.val(),
                    class_name: "url-input"
                });
            }
//
            if (type_select.val()) {
                let arr = type_select.find(':selected')
                let str = '';
                let params_arr = []
                // for (let i = 0; i < arr.length; i++) {
                //     str = str + $(arr[i]).text() + ', '
                //     params_arr.push($(arr[i]).val())
                // }
                // get_params.platform_type = params_arr;
                // tags_labels.push({
                //     label: type_select.prev().text() + ': ' + removeLastComma(str),
                //     class_name: "type-select"
                // });
                for (let i = 0; i < arr.length; i++) {
                    params_arr.push($(arr[i]).val())
                    tags_labels.push({
                        label: $(arr[i]).text(),
                        class_name: "type-select"
                    });
                }
                get_params.platform_type = params_arr;
            }

            if (subject_select.val()) {
                let arr = subject_select.find(':selected')
                let str = '';
                let params_arr = []
                // for (let i = 0; i < arr.length; i++) {
                //     str = str + $(arr[i]).text() + ', '
                //     params_arr.push($(arr[i]).val())
                // }
                // get_params.subjects = params_arr;
                // tags_labels.push({
                //     label: subject_select.prev().text() + ': ' + removeLastComma(str),
                //     class_name: "subject-select"
                // });
                for (let i = 0; i < arr.length; i++) {
                    params_arr.push($(arr[i]).val())
                    tags_labels.push({
                        label: $(arr[i]).text(),
                        class_name: "subject-select"
                    });
                }
                get_params.subjects = params_arr;
            }

            if (country_select.val()) {
                let arr = country_select.find(':selected')
                let str = '';
                let params_arr = []
                // for (let i = 0; i < arr.length; i++) {
                //     str = str + $(arr[i]).text() + ', '
                //     params_arr.push($(arr[i]).val())
                // }
                // get_params.Country = params_arr;
                // tags_labels.push({
                //     label: country_select.prev().text() + ': ' + removeLastComma(str),
                //     class_name: "country-select"
                // });
                for (let i = 0; i < arr.length; i++) {
                    params_arr.push($(arr[i]).val())
                    tags_labels.push({
                        label: $(arr[i]).text(),
                        class_name: "country-select"
                    });
                }
                get_params.Country = params_arr;
                city_select.removeAttr('disabled')
            } else {
                city_select.attr('disabled', true).trigger("chosen:updated")
            }

            if (city_select.val()) {
                let arr = city_select.find(':selected')
                let str = '';
                let params_arr = []
                // for (let i = 0; i < arr.length; i++) {
                //     str = str + $(arr[i]).text() + ', '
                //     params_arr.push($(arr[i]).val())
                // }
                // get_params.city = params_arr;
                // tags_labels.push({
                //     label: city_select.prev().text() + ': ' + removeLastComma(str),
                //     class_name: "city-select"
                // });
                for (let i = 0; i < arr.length; i++) {
                    params_arr.push($(arr[i]).val())
                    tags_labels.push({
                        label: $(arr[i]).text(),
                        class_name: "city-select",
                        country: $(arr[i]).data('country')
                    });
                }
                get_params.city = params_arr;
            }

            if (language_select.val()) {
                let arr = language_select.find(':selected')
                let str = '';
                let params_arr = []
                // for (let i = 0; i < arr.length; i++) {
                //     str = str + $(arr[i]).text() + ', '
                //     params_arr.push($(arr[i]).val())
                // }
                // get_params.language = params_arr;
                // tags_labels.push({
                //     label: language_select.prev().text() + ': ' + removeLastComma(str),
                //     class_name: "language-select"
                // });
                for (let i = 0; i < arr.length; i++) {
                    params_arr.push($(arr[i]).val())
                    tags_labels.push({
                        label: $(arr[i]).text(),
                        class_name: "language-select"
                    });
                }
                get_params.language = params_arr;
            }

            /////
            if (link_profile_select.val()) {
                let arr = link_profile_select.find(':selected')
                let str = '';
                for (let i = 0; i < arr.length; i++) {
                    str = str + $(arr[i]).text() + ', '
                }
                get_params.profileUrl = link_profile_select.val();
                if (Number.parseInt(get_params.profileUrl)) {
                    tags_labels.push({
                        label: link_profile_select.prev().text() + ': ' + removeLastComma(str),
                        class_name: "link-profile-select"
                    });
                }
            }

            return {
                tags_labels: tags_labels,
                get_params: get_params,
            }
        }

        function init() {
            removeTags();
            let init_result = checkTags();
            for (let i of init_result.tags_labels) {
                if ('country' in i) {
                    $('.filter-list').prepend(getListItem(i.label, i.class_name, i.country));
                } else {
                    $('.filter-list').prepend(getListItem(i.label, i.class_name));
                }
            }
            if (init_result.tags_labels.length) {
                $('#tag-list-scroll').removeClass('hidden');
            } else {
                $('#tag-list-scroll').addClass('hidden');
            }

            if (init_result.tags_labels.length) {
                $('#remove-all-tags-btn').css('display', 'block')
            } else {
                $('#remove-all-tags-btn').css('display', 'none')
            }
            getAreasCount(init_result.get_params)

            checkCountriesTags()
        }

        /** Проверяет какие страны остались в селекте и удяляет города из тегов по странам которых уже нет в селекте */
        function checkCountriesTags() {
            let selectedCountriesKeys = []
            let selectedCountries = $('select[name="Country[]"]').find(':selected')
            for (let i = 0; i < selectedCountries.length; i++) {
                selectedCountriesKeys.push($(selectedCountries[i]).val())
            }
            let items = $('.filter-list > li')
            for (let i = 0; i < items.length; i++) {
                if (selectedCountriesKeys.length > 0) {
                    if ($(items[i]).data('country') !== undefined) {
                        if (!selectedCountriesKeys.includes($(items[i]).data('country').toString())) {
                            $(items[i]).remove()
                        }
                    }
                } else {
                    $('select[name="city[]"]').val('').trigger('chosen:updated');
                    if ($(items[i]).data('country') !== undefined) {
                        $(items[i]).remove()
                    }
                }
            }
            let init_result = checkTags();
            getAreasCount(init_result.get_params)
            if (!init_result.tags_labels.length) {
                $('.btn-del-filter').css('display', 'none')
            }
        }

        $(document).on('click', '.filter-tag-close-btn', function () {
            let class_name = $(this).data('class')
            let label = $(this).prev('a').text()
            $(this).parent().remove()
            if ($('.filter-list').children().not('li:last-child').length === 0) {
                $('#remove-all-tags-btn').css('display', 'none')
            }
            clearForm(class_name, label)

            let get_params = checkTags().get_params
            getAreasCount(get_params)

            let url = window.location.search;
            var queryParams = new URLSearchParams(url);
            switch (class_name) {
                case 'url-input':
                    queryParams.delete("url");
                    break;
                case 'type-select':
                    queryParams.delete("platform_type[]");
                    break;
                case 'subject-select':
                    queryParams.delete("subjects[]");
                    break;
                case 'country-select':
                    queryParams.delete("Country[]");
                    break;
                case 'city-select':
                    queryParams.delete("city[]");
                    break;
                case 'language-select':
                    queryParams.delete("language[]");
                    break;
                case 'trast-inputs':
                    queryParams.delete("trust_from");
                    queryParams.delete("trust_to");
                    break;
                case 'spam-inputs':
                    queryParams.delete("spam_from");
                    queryParams.delete("spam_to");
                    break;
                case 'iks-inputs':
                    queryParams.delete("iks_from");
                    queryParams.delete("iks_to");
                    break;
                case 'tf-inputs':
                    queryParams.delete("tf_from");
                    queryParams.delete("tf_to");
                    break;
                case 'cf-inputs':
                    queryParams.delete("cf_from");
                    queryParams.delete("cf_to");
                    break;
                case 'tr-inputs':
                    queryParams.delete("tr_from");
                    queryParams.delete("tr_to");
                    break;
                case 'alexa-inputs':
                    queryParams.delete("alexa_from");
                    queryParams.delete("alexa_to");
                    break;
                case 'da-moz-inputs':
                    queryParams.delete("damoz_from");
                    queryParams.delete("damoz_to");
                    break;
                case 'da-spam-score-inputs':
                    queryParams.delete("daspamscore_from");
                    queryParams.delete("daspamscore_to");
                    break;
                case 'trafic-inputs':
                    queryParams.delete("attendance_from");
                    queryParams.delete("attendance_to");
                    break;
                case 'date-inputs':
                    queryParams.delete("date_from");
                    queryParams.delete("date_to");
                    break;
                case 'link-profile-select':
                    queryParams.delete("profileUrl");
                    $('select[name="profileUrl"]').val('').trigger('chosen:updated');
                    break;
                case 'protocol-checkboxes':
                    queryParams.delete("http");
                    queryParams.delete("https");
                    break;
                case 'url-checkboxes':
                    queryParams.delete("dofollow");
                    queryParams.delete("nofollow");
                    queryParams.delete("ugc");
                    queryParams.delete("redirect");
                    queryParams.delete("activeInactive");
                    queryParams.delete("noactiveInactive");
                    break;
            }
            history.replaceState(null, null, "?" + queryParams.toString());

            checkCountries()

            checkCountriesTags()

            if (!$(".filter.w-100.collapse").hasClass('in')) {
                $('#filter-form').trigger('submit');
            }
        });
        // Удаление тегов
        $('#remove-all-tags-btn').on('click', function () {
            let arr = $('.filter-list').children().not('li:last-child').find('.filter-tag-close-btn');
            for (let i = 0; i < arr.length; i++) {
                clearForm($(arr[i]).data('class'))
            }
            removeTags()
            $(this).css('display', 'none')
            $('#tag-list-scroll').addClass('hidden');
            history.replaceState(null, null, "?");

            getAreasCount({})

            window.location.reload();
        })
        $('#modal-filter').on('click', '.cansel-modal, .close', function () {
            let arr = $('.filter-list').children().not('li:last-child').find('.filter-tag-close-btn');
            for (let i = 0; i < arr.length; i++) {
                clearForm($(arr[i]).data('class'))
            }
            removeTags()
            $('#tag-list-scroll').addClass('hidden');
            history.replaceState(null, null, "?");
            getAreasCount({})
        })

        function removeTags() {
            $('.filter-list').children().not('li:last-child').remove();
        }


        function removeLastComma(strng) {
            let n = strng.lastIndexOf(",");
            let a = strng.substring(0, n);
            return a;
        }

        function getParams(url) {
            var params = {};
            var parser = document.createElement('a');
            parser.href = url;
            var query = parser.search.substring(1);
            var vars = query.split('&');
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split('=');
                params[pair[0]] = decodeURIComponent(pair[1]);
            }
            return params;
        }

        all_checkbox.on('click', function () {
            if ($(all_checkbox).not(':checked')) {
                dofollow_checkbox.prop("checked", false).removeAttr('disabled')
                nofollow_checkbox.prop("checked", false).removeAttr('disabled')
                ugc_checkbox.prop("checked", false).removeAttr('disabled')
                redirect_checkbox.prop("checked", false).removeAttr('disabled')
                active_checkbox.prop("checked", false).removeAttr('disabled')
                noactive_checkbox.prop("checked", false).removeAttr('disabled')
                params_arr_url_type = []
            }
        })
        country_select.change(function () {
            checkCountries()
        })

        function checkCountries() {
            let cities_keys = []
            let cities = city_select.find('option:selected')
            for (let i = 0; i < cities.length; i++) {
                cities_keys.push($(cities[i]).text())
            }
            if (country_select.val()) {
                $.ajax({
                    type: "POST",
                    url: "/ajax/get_cities_by_ids",
                    data: {
                        'data': country_select.val()
                    },
                    success: function (data) {
                        city_select.empty().trigger("chosen:updated")
                        let options = []
                        for (const [key, item] of Object.entries(data.city)) {
                            if (cities_keys.includes(item.value)) {
                                options.push('<option data-country="' + item.key + '" value="' + item.id + '" selected="selected">' + item.value + '</option>')
                            } else {
                                options.push('<option data-country="' + item.key + '" value="' + item.id + '">' + item.value + '</option>')
                            }
                        }
                        city_select.append(options).trigger("chosen:updated")
                    }
                });
            }
        }

        function getAreasCount(get_params) {
            $.ajax({
                type: "get",
                url: "/ajax/get_areas",
                data: get_params,
                success: function (data) {
                    $('.summ-amount').text(data.areasCount)
                },
                error: function (jqXHR, exception) {
                    //
                },
            });
        }

        // // Тут найдемп все что нужно скрывать в каталоге
        // $('.c-t-theme__tags').each(function( index, element ) {
        //     let html = $(this).html();
        //     if (html.length > 350) {
        //         $(this).addClass('longer');
        //         if ((index % 2)) {
        //             $(this).addClass('grayscale');
        //         }
        //     }
        //     console.log(html.length);
        // });
        //

        $('.c-t-theme__tags').on('click', function () {
            $(this).toggleClass('visible-all');
        })
        let pageStart = 2;
        $('.ajax-pagination').on('click', function () {
            let el = $(this);
            el.html('<span class="lds-dual-ring"></span>');
            let searchParams = getUrlVars()
            searchParams['page'] = pageStart

            $.ajax({
                type: "get",
                url: "/ajax/get_areas_wrap",
                data: searchParams,
                success: function (data) {
                    if (data.status) {
                        el.before(data.html);
                        pageStart++;
                        el.html('Показать еще 20 площадок');
                    }
                },
                error: function (jqXHR, exception) {
                    //
                },
            });
        })

    }
})

function getUrlVars()
{
    var vars = {}, hash;
    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
    for(var i = 0; i < hashes.length; i++)
    {
        hash = hashes[i].split('=');
   //     vars.push(hash[0]);
        vars[hash[0]] = hash[1];
    }
    return vars;
}

$(document).ready(function () {
    if ($( window ).width() <= 1024) {
        $('body').addClass('aside-collapsed');
    }

    $('.add-platform').on("click", function (event) {
        $(event.target).on('mouseover', function (event) {
            if ($(event.target).hasClass('added-to-cart')) {
                $(event.target).html('')
                $(event.target).text('Отменa')
            }
        }).on('mouseout', function (event) {
            if ($(event.target).hasClass('added-to-cart')) {
                $(event.target).text('')
                $(event.target).html('<svg xmlns="http://www.w3.org/2000/svg" width="15.556" height="11.314" viewBox="0 0 15.556 11.314">\n' +
                    '  <g id="Сгруппировать_7542" data-name="Сгруппировать 7542" transform="translate(-1771.343 -1119.101)">\n' +
                    '    <rect id="Прямоугольник_8139" data-name="Прямоугольник 8139" width="2" height="14" rx="1" transform="translate(1785.485 1119.101) rotate(45)" fill="#fff"/>\n' +
                    '    <rect id="Прямоугольник_8138" data-name="Прямоугольник 8138" width="8" height="2" rx="1" transform="translate(1772.757 1123.343) rotate(45)" fill="#fff"/>\n' +
                    '  </g>\n' +
                    '</svg>&nbsp;Добавлено');
            }
        })
    })

    $('.filter-date').datetimepicker({
        format: 'DD.MM.YYYY',
        locale: 'ru',
    }).on('dp.hide', function () {
        document.activeElement.blur();
    })
});




